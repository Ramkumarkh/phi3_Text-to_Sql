[
	{
		"question": "Find all genres available in the bookstore.",
		"sql_query": "SELECT * FROM bookstore.genres;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve the total number of books available in each genre.",
		"sql_query": "SELECT genre_id, COUNT(*) FROM bookstore.books GROUP BY genre_id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books along with their genre names.",
		"sql_query": "SELECT b.title, g.name FROM bookstore.books b JOIN bookstore.genres g ON b.genre_id = g.id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get details of authors who have written more than one book.",
		"sql_query": "SELECT a.name, COUNT(ba.book_id) FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id GROUP BY a.name HAVING COUNT(ba.book_id) > 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find all books with 'Fiction' as their genre.",
		"sql_query": "SELECT b.title FROM bookstore.books b JOIN bookstore.genres g ON b.genre_id = g.id WHERE g.name = 'Fiction';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve the name and biography of all authors who are main authors of any book.",
		"sql_query": "SELECT a.name, a.bio FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id WHERE ba.is_main_author = true;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books that do not have a description.",
		"sql_query": "SELECT title FROM bookstore.books WHERE description = '';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Count how many books each author has written.",
		"sql_query": "SELECT a.name, COUNT(ba.book_id) FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id GROUP BY a.name;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find the most popular genre based on the number of books.",
		"sql_query": "SELECT g.name FROM bookstore.genres g JOIN bookstore.books b ON g.id = b.genre_id GROUP BY g.name ORDER BY COUNT(b.id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books and their authors where the author is not the main author.",
		"sql_query": "SELECT b.title, a.name FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id JOIN bookstore.authors a ON ba.author_id = a.id WHERE ba.is_main_author = false;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find the name and description of all genres.",
		"sql_query": "SELECT name, description FROM bookstore.genres;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all authors and the number of books they have written.",
		"sql_query": "SELECT a.name, COUNT(ba.book_id) AS book_count FROM bookstore.authors a LEFT JOIN bookstore.books_authors ba ON a.id = ba.author_id GROUP BY a.id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve all books with their ISBN and titles.",
		"sql_query": "SELECT ISBN, title FROM bookstore.books;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find books without any authors linked.",
		"sql_query": "SELECT b.title FROM bookstore.books b LEFT JOIN bookstore.books_authors ba ON b.id = ba.book_id WHERE ba.author_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get the full details of the book with the longest description.",
		"sql_query": "SELECT * FROM bookstore.books ORDER BY LENGTH(description) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Which genre has the least number of books?",
		"sql_query": "SELECT g.name FROM bookstore.genres g LEFT JOIN bookstore.books b ON g.id = b.genre_id GROUP BY g.id ORDER BY COUNT(b.id) ASC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List every book's title and its main author's name.",
		"sql_query": "SELECT b.title, a.name FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id JOIN bookstore.authors a ON ba.author_id = a.id WHERE ba.is_main_author = true;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "How many genres have at least 10 books?",
		"sql_query": "SELECT COUNT(*) FROM (SELECT genre_id FROM bookstore.books GROUP BY genre_id HAVING COUNT(id) >= 10) AS subquery;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve the most common author name.",
		"sql_query": "SELECT name, COUNT(*) FROM bookstore.authors GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List the titles of all books with 'Mystery' genre.",
		"sql_query": "SELECT b.title FROM bookstore.books b JOIN bookstore.genres g ON b.genre_id = g.id WHERE g.name = 'Mystery';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Which authors have written books in more than one genre?",
		"sql_query": "SELECT a.name FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id JOIN bookstore.books b ON ba.book_id = b.id GROUP BY a.id HAVING COUNT(DISTINCT b.genre_id) > 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find all books by 'John Smith' and their genres.",
		"sql_query": "SELECT b.title, g.name FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id JOIN bookstore.authors a ON ba.author_id = a.id JOIN bookstore.genres g ON b.genre_id = g.id WHERE a.name = 'John Smith';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all genres with descriptions that contain the word 'Adventure'.",
		"sql_query": "SELECT * FROM bookstore.genres WHERE description LIKE '%Adventure%';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "How many books are there in each genre, sorted by genre name?",
		"sql_query": "SELECT g.name, COUNT(b.id) AS book_count FROM bookstore.genres g LEFT JOIN bookstore.books b ON g.id = b.genre_id GROUP BY g.id ORDER BY g.name;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve the ISBN of all books that have exactly three authors.",
		"sql_query": "SELECT b.ISBN FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id GROUP BY b.id HAVING COUNT(ba.author_id) = 3;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all authors who have not written any books.",
		"sql_query": "SELECT name FROM bookstore.authors a WHERE NOT EXISTS (SELECT 1 FROM bookstore.books_authors ba WHERE ba.author_id = a.id);",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Which book has the most authors?",
		"sql_query": "SELECT b.title FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id GROUP BY b.id ORDER BY COUNT(ba.author_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List the names of all books that start with the letter 'A'.",
		"sql_query": "SELECT title FROM bookstore.books WHERE title LIKE 'A%';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find the average number of books per genre.",
		"sql_query": "SELECT AVG(book_count) FROM (SELECT COUNT(*) AS book_count FROM bookstore.books GROUP BY genre_id) AS subquery;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all main authors for the book titled 'Great Expectations'.",
		"sql_query": "SELECT a.name FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id JOIN bookstore.books b ON ba.book_id = b.id WHERE b.title = 'Great Expectations' AND ba.is_main_author = true;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a view for book details that includes genre names.",
		"sql_query": "CREATE OR REPLACE VIEW view_book_details AS SELECT b.id, b.title, b.description, b.ISBN, g.name AS genre_name FROM bookstore.books b JOIN bookstore.genres g ON b.genre_id = g.id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve all data from the 'view_book_details'.",
		"sql_query": "SELECT * FROM view_book_details;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a function to count books by genre.",
		"sql_query": "CREATE OR REPLACE FUNCTION count_books_by_genre(genre_id INT) RETURNS INT AS $$ BEGIN RETURN (SELECT COUNT(*) FROM bookstore.books WHERE genre_id = genre_id); END; $$ LANGUAGE plpgsql;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Use the function to find the number of books in genre with ID 1.",
		"sql_query": "SELECT count_books_by_genre(1);",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a stored procedure to add a new book with its author.",
		"sql_query": "CREATE OR REPLACE PROCEDURE add_book_with_author(book_title VARCHAR, book_desc VARCHAR, book_isbn CHAR(13), genre_id INT, author_name VARCHAR, author_bio VARCHAR) LANGUAGE plpgsql AS $$ BEGIN INSERT INTO bookstore.genres(name, description) VALUES (book_title, book_desc, book_isbn, genre_id); INSERT INTO bookstore.authors(name, bio) VALUES (author_name, author_bio); END; $$;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Call the stored procedure to add a book and its author.",
		"sql_query": "CALL add_book_with_author('New Book Title', 'Description of the book', '1234567890123', 1, 'Author Name', 'Biography of the author');",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a view to list authors and their total books count.",
		"sql_query": "CREATE OR REPLACE VIEW view_author_books AS SELECT a.name, COUNT(ba.book_id) AS total_books FROM bookstore.authors a JOIN bookstore.books_authors ba ON a.id = ba.author_id GROUP BY a.id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Select all from the view of authors and their books count.",
		"sql_query": "SELECT * FROM view_author_books;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a function to get book details by ISBN.",
		"sql_query": "CREATE OR REPLACE FUNCTION get_book_by_isbn(book_isbn CHAR(13)) RETURNS TABLE(id INT, title VARCHAR, description VARCHAR, ISBN CHAR(13), genre_id INT) AS $$ BEGIN RETURN QUERY SELECT * FROM bookstore.books WHERE ISBN = book_isbn; END; $$ LANGUAGE plpgsql;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve book details using the ISBN function for '1234567890123'.",
		"sql_query": "SELECT * FROM get_book_by_isbn('1234567890123');",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books with more than two authors using a view.",
		"sql_query": "CREATE OR REPLACE VIEW view_books_multiple_authors AS SELECT b.title, COUNT(ba.author_id) AS authors_count FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id GROUP BY b.id HAVING COUNT(ba.author_id) > 2;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Select all from the view of books with multiple authors.",
		"sql_query": "SELECT * FROM view_books_multiple_authors;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a function to delete a book by its ISBN.",
		"sql_query": "CREATE OR REPLACE FUNCTION delete_book_by_isbn(book_isbn CHAR(13)) RETURNS VOID AS $$ BEGIN DELETE FROM bookstore.books WHERE ISBN = book_isbn; END; $$ LANGUAGE plpgsql;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Delete a book using the function for ISBN '1234567890123'.",
		"sql_query": "SELECT delete_book_by_isbn('1234567890123');",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a view to list books and their main author only.",
		"sql_query": "CREATE OR REPLACE VIEW view_main_authors AS SELECT b.title, a.name FROM bookstore.books b JOIN bookstore.books_authors ba ON b.id = ba.book_id JOIN bookstore.authors a ON ba.author_id = a.id WHERE ba.is_main_author = true;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Select all from the view of books and their main authors.",
		"sql_query": "SELECT * FROM view_main_authors;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a function to update the biography of an author by ID.",
		"sql_query": "CREATE OR REPLACE FUNCTION update_author_bio(author_id INT, new_bio VARCHAR) RETURNS VOID AS $$ BEGIN UPDATE bookstore.authors SET bio = new_bio WHERE id = author_id; END; $$ LANGUAGE plpgsql;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Update the biography of author with ID 1 using the function.",
		"sql_query": "SELECT update_author_bio(1, 'Updated biography here');",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Create a stored procedure to remove an author and all their books.",
		"sql_query": "CREATE OR REPLACE PROCEDURE remove_author_and_books(author_id INT) LANGUAGE plpgsql AS $$ BEGIN DELETE FROM bookstore.books_authors WHERE author_id = author_id; DELETE FROM bookstore.authors WHERE id = author_id; END; $$;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Call the stored procedure to remove author ID 1 and their books.",
		"sql_query": "CALL remove_author_and_books(1);",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books with their genres.",
		"sql_query": "SELECT books.title, genres.name FROM bookstore.books JOIN bookstore.genres ON books.genre_id = genres.id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find the main author of each book.",
		"sql_query": "SELECT books.title, authors.name FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id JOIN bookstore.authors ON books_authors.author_id = authors.id WHERE books_authors.is_main_author = TRUE;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get the total number of books per genre.",
		"sql_query": "SELECT genres.name, COUNT(books.id) AS total_books FROM bookstore.books JOIN bookstore.genres ON books.genre_id = genres.id GROUP BY genres.name;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Select all authors who have not written any books.",
		"sql_query": "SELECT authors.name FROM bookstore.authors LEFT JOIN bookstore.books_authors ON authors.id = books_authors.author_id WHERE books_authors.book_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find books that have more than one author.",
		"sql_query": "SELECT books.title FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id GROUP BY books.title HAVING COUNT(books_authors.author_id) > 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List the authors and the number of books they have authored.",
		"sql_query": "SELECT authors.name, COUNT(books_authors.book_id) AS total_books FROM bookstore.authors LEFT JOIN bookstore.books_authors ON authors.id = books_authors.author_id GROUP BY authors.name;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get all books with ISBNs that start with '978'.",
		"sql_query": "SELECT title FROM bookstore.books WHERE ISBN LIKE '978%';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve books that belong to the genre 'Science Fiction'.",
		"sql_query": "SELECT books.title FROM bookstore.books JOIN bookstore.genres ON books.genre_id = genres.id WHERE genres.name = 'Science Fiction';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find all books by author 'John Doe'.",
		"sql_query": "SELECT books.title FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id JOIN bookstore.authors ON books_authors.author_id = authors.id WHERE authors.name = 'John Doe';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get all books and their main authors where the author is not the main author.",
		"sql_query": "SELECT books.title, authors.name FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id JOIN bookstore.authors ON books_authors.author_id = authors.id WHERE books_authors.is_main_author = FALSE;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve all genres and the number of books in each.",
		"sql_query": "SELECT genres.name, COUNT(books.id) AS number_of_books FROM bookstore.genres LEFT JOIN bookstore.books ON genres.id = books.genre_id GROUP BY genres.name;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find authors who have written books in multiple genres.",
		"sql_query": "SELECT authors.name FROM bookstore.authors JOIN bookstore.books_authors ON authors.id = books_authors.author_id JOIN bookstore.books ON books_authors.book_id = books.id GROUP BY authors.name HAVING COUNT(DISTINCT books.genre_id) > 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List the books and their genres for books authored by 'Jane Smith'.",
		"sql_query": "SELECT books.title, genres.name FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id JOIN bookstore.authors ON books_authors.author_id = authors.id JOIN bookstore.genres ON books.genre_id = genres.id WHERE authors.name = 'Jane Smith';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Get the total number of authors who have written books.",
		"sql_query": "SELECT COUNT(DISTINCT authors.id) AS total_authors FROM bookstore.authors JOIN bookstore.books_authors ON authors.id = books_authors.author_id;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Select books with the longest title.",
		"sql_query": "SELECT title FROM bookstore.books WHERE LENGTH(title) = (SELECT MAX(LENGTH(title)) FROM bookstore.books);",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all genres with descriptions containing the word 'classic'.",
		"sql_query": "SELECT name, description FROM bookstore.genres WHERE description LIKE '%classic%';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve all books that have no authors assigned.",
		"sql_query": "SELECT books.title FROM bookstore.books LEFT JOIN bookstore.books_authors ON books.id = books_authors.book_id WHERE books_authors.author_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Find books with a specific ISBN '1234567890123'.",
		"sql_query": "SELECT title FROM bookstore.books WHERE ISBN = '1234567890123';",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List the authors and their bios.",
		"sql_query": "SELECT name, bio FROM bookstore.authors;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "Retrieve books with a description length greater than 100 characters.",
		"sql_query": "SELECT title FROM bookstore.books WHERE LENGTH(description) > 100;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all books authored by more than one author.",
		"sql_query": "SELECT books.title FROM bookstore.books JOIN bookstore.books_authors ON books.id = books_authors.book_id GROUP BY books.title HAVING COUNT(books_authors.author_id) > 1;",
		"input": "\n\ndatabase schema:\n\n  CREATE TABLE bookstore.genres \n( id SERIAL PRIMARY KEY,\n\"name\" varchar(255) NOT NULL UNIQUE,\n\"description\" varchar(255) NOT NULL )\n\n  CREATE TABLE bookstore.authors \n( id SERIAL PRIMARY KEY,\n \"name\" varchar(255) NOT NULL,\n \"bio\" varchar(500) NOT NULL )\n\n\n  CREATE TABLE bookstore.books\n( id SERIAL PRIMARY KEY,\ntitle varchar(255) NOT NULL,\ndescription varchar(255) NOT NULL,\nISBN char(13) NOT NULL,\ngenre_id INT NOT NULL,\nCONSTRAINT fk_genre\nFOREIGN KEY(genre_id) \nREFERENCES bookstore.genres(id) )\n\n  CREATE TABLE bookstore.books_authors \n( book_id  int REFERENCES bookstore.books (id),\n  author_id int REFERENCES bookstore.authors (id),\n  is_main_author BOOLEAN NOT NULL DEFAULT false,\n  CONSTRAINT bill_product_pkey PRIMARY KEY (book_id, author_id) );\n  "
	},
	{
		"question": "List all doctors and their specializations.",
		"sql_query": "SELECT doc_name, doc_specialization FROM hospital.doctors;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find all patients who have an appointment on '2024-08-01'.",
		"sql_query": "SELECT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE app_date = '2024-08-01';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the total number of doctors in each department.",
		"sql_query": "SELECT dept_name, COUNT(doc_id) AS total_doctors FROM hospital.departments LEFT JOIN hospital.doctors ON departments.dept_id = doctors.dept_id GROUP BY dept_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Select all patients who have visited a doctor for the first time.",
		"sql_query": "SELECT DISTINCT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE is_first_visit = TRUE;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find the doctor with the highest number of appointments.",
		"sql_query": "SELECT doc_name, COUNT(appointments.app_id) AS total_appointments FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id GROUP BY doc_name ORDER BY total_appointments DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all departments and the number of doctors in each.",
		"sql_query": "SELECT dept_name, COUNT(doctors.doc_id) AS number_of_doctors FROM hospital.departments LEFT JOIN hospital.doctors ON departments.dept_id = doctors.dept_id GROUP BY dept_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get all appointments scheduled for a specific doctor named 'Dr. Smith'.",
		"sql_query": "SELECT app_date, app_time, pat_name FROM hospital.appointments JOIN hospital.patients ON appointments.pat_id = patients.pat_id JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id WHERE doc_name = 'Dr. Smith';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find all patients who have visited 'Dr. John' for the first time.",
		"sql_query": "SELECT DISTINCT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id WHERE doc_name = 'Dr. John' AND is_first_visit = TRUE;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all appointments on '2024-08-02' for patients older than 30 years.",
		"sql_query": "SELECT pat_name, app_date, app_time FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE app_date = '2024-08-02' AND DATE_PART('year', AGE(pat_dob)) > 30;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all doctors and their corresponding departments.",
		"sql_query": "SELECT doc_name, dept_name FROM hospital.doctors JOIN hospital.departments ON doctors.dept_id = departments.dept_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find the number of appointments for each patient.",
		"sql_query": "SELECT pat_name, COUNT(appointments.app_id) AS appointment_count FROM hospital.patients LEFT JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Select all departments with the word 'Cardio' in their name.",
		"sql_query": "SELECT dept_name FROM hospital.departments WHERE dept_name LIKE '%Cardio%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the list of patients who do not have any appointments.",
		"sql_query": "SELECT pat_name FROM hospital.patients LEFT JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE appointments.app_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find patients born before '1990-01-01'.",
		"sql_query": "SELECT pat_name FROM hospital.patients WHERE pat_dob < '1990-01-01';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all appointments where the appointment time is after 2 PM.",
		"sql_query": "SELECT app_date, app_time, pat_name FROM hospital.appointments JOIN hospital.patients ON appointments.pat_id = patients.pat_id WHERE app_time > '14:00:00';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all departments along with their descriptions.",
		"sql_query": "SELECT dept_name, dept_description FROM hospital.departments;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Select patients who have appointments with more than one doctor.",
		"sql_query": "SELECT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name HAVING COUNT(DISTINCT doc_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the average number of appointments per doctor.",
		"sql_query": "SELECT AVG(appointment_count) FROM (SELECT doc_id, COUNT(app_id) AS appointment_count FROM hospital.appointments GROUP BY doc_id) AS subquery;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find doctors who work in departments with the word 'Surgery'.",
		"sql_query": "SELECT doc_name FROM hospital.doctors JOIN hospital.departments ON doctors.dept_id = departments.dept_id WHERE dept_name LIKE '%Surgery%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all doctors who have no appointments.",
		"sql_query": "SELECT doc_name FROM hospital.doctors LEFT JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id WHERE appointments.app_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find all appointments for doctors specializing in 'Cardiology'.",
		"sql_query": "SELECT app_date, app_time, pat_name FROM hospital.appointments JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id JOIN hospital.patients ON appointments.pat_id = patients.pat_id WHERE doc_specialization = 'Cardiology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all patients and their appointment counts.",
		"sql_query": "SELECT pat_name, COUNT(appointments.app_id) AS appointment_count FROM hospital.patients LEFT JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Select doctors who have appointments with patients younger than 25 years old.",
		"sql_query": "SELECT DISTINCT doc_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id JOIN hospital.patients ON appointments.pat_id = patients.pat_id WHERE DATE_PART('year', AGE(pat_dob)) < 25;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find patients who have appointments with doctors in the 'Neurology' department.",
		"sql_query": "SELECT DISTINCT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id JOIN hospital.departments ON doctors.dept_id = departments.dept_id WHERE dept_name = 'Neurology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List the doctors and the number of patients they have seen.",
		"sql_query": "SELECT doc_name, COUNT(DISTINCT appointments.pat_id) AS number_of_patients FROM hospital.doctors LEFT JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id GROUP BY doc_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all doctors working in the 'Oncology' department.",
		"sql_query": "SELECT doc_name FROM hospital.doctors JOIN hospital.departments ON doctors.dept_id = departments.dept_id WHERE dept_name = 'Oncology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Select patients who have appointments with more than one department.",
		"sql_query": "SELECT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id GROUP BY pat_name HAVING COUNT(DISTINCT doctors.dept_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the list of patients who have appointments on consecutive days.",
		"sql_query": "SELECT DISTINCT p.pat_name FROM hospital.patients p JOIN hospital.appointments a1 ON p.pat_id = a1.pat_id JOIN hospital.appointments a2 ON p.pat_id = a2.pat_id WHERE a1.app_date = a2.app_date - INTERVAL '1 day';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all doctors and their patients in alphabetical order.",
		"sql_query": "SELECT doc_name, pat_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id JOIN hospital.patients ON appointments.pat_id = patients.pat_id ORDER BY doc_name, pat_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find doctors who have appointments with patients born in '2000'.",
		"sql_query": "SELECT DISTINCT doc_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id JOIN hospital.patients ON appointments.pat_id = patients.pat_id WHERE EXTRACT(YEAR FROM pat_dob) = 2000;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the total number of appointments for doctors who specialize in 'Orthopedics'.",
		"sql_query": "SELECT COUNT(app_id) AS total_appointments FROM hospital.appointments JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id WHERE doc_specialization = 'Orthopedics';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all departments with no doctors.",
		"sql_query": "SELECT dept_name FROM hospital.departments LEFT JOIN hospital.doctors ON departments.dept_id = doctors.dept_id WHERE doctors.doc_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find patients who have appointments in the next 7 days.",
		"sql_query": "SELECT DISTINCT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE app_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all doctors who have appointments on weekends.",
		"sql_query": "SELECT DISTINCT doc_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id WHERE EXTRACT(DOW FROM app_date) IN (0, 6);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all patients who have appointments on the first of any month.",
		"sql_query": "SELECT DISTINCT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id WHERE EXTRACT(DAY FROM app_date) = 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the earliest appointment date for each patient.",
		"sql_query": "SELECT pat_name, MIN(app_date) AS earliest_appointment FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find patients who have appointments scheduled more than once on the same day.",
		"sql_query": "SELECT pat_name FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name, app_date HAVING COUNT(app_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all doctors who have never had a first-time patient visit.",
		"sql_query": "SELECT doc_name FROM hospital.doctors WHERE doc_id NOT IN (SELECT DISTINCT doc_id FROM hospital.appointments WHERE is_first_visit = TRUE);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find all departments with the word 'Pediatrics' in their name.",
		"sql_query": "SELECT dept_name FROM hospital.departments WHERE dept_name LIKE '%Pediatrics%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the list of patients who have appointments with doctors from the same department more than once.",
		"sql_query": "SELECT DISTINCT p.pat_name FROM hospital.patients p JOIN hospital.appointments a ON p.pat_id = a.pat_id JOIN hospital.doctors d ON a.doc_id = d.doc_id GROUP BY p.pat_name, d.dept_id HAVING COUNT(DISTINCT a.app_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all patients and their appointments sorted by appointment date.",
		"sql_query": "SELECT pat_name, app_date, app_time FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id ORDER BY app_date, app_time;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find doctors who have never worked in the 'Radiology' department.",
		"sql_query": "SELECT doc_name FROM hospital.doctors WHERE doc_id NOT IN (SELECT doc_id FROM hospital.doctors d JOIN hospital.departments dp ON d.dept_id = dp.dept_id WHERE dept_name = 'Radiology');",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the list of patients who have been seen by doctors with 'Dr.' in their name.",
		"sql_query": "SELECT DISTINCT p.pat_name FROM hospital.patients p JOIN hospital.appointments a ON p.pat_id = a.pat_id JOIN hospital.doctors d ON a.doc_id = d.doc_id WHERE d.doc_name LIKE 'Dr.%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve all patients who have appointments only in the morning.",
		"sql_query": "SELECT DISTINCT p.pat_name FROM hospital.patients p JOIN hospital.appointments a ON p.pat_id = a.pat_id WHERE EXTRACT(HOUR FROM a.app_time) < 12 AND p.pat_id NOT IN (SELECT pat_id FROM hospital.appointments WHERE EXTRACT(HOUR FROM app_time) >= 12);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the count of patients who have appointments every month.",
		"sql_query": "SELECT COUNT(DISTINCT pat_id) FROM (SELECT pat_id, COUNT(DISTINCT EXTRACT(MONTH FROM app_date)) AS months_count FROM hospital.appointments GROUP BY pat_id HAVING months_count = 12) AS monthly_appointments;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find the average age of patients who have appointments in the 'Pediatrics' department.",
		"sql_query": "SELECT AVG(DATE_PART('year', AGE(pat_dob))) AS average_age FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id JOIN hospital.doctors ON appointments.doc_id = doctors.doc_id JOIN hospital.departments ON doctors.dept_id = departments.dept_id WHERE dept_name = 'Pediatrics';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List the patients who have the most appointments in one month.",
		"sql_query": "SELECT pat_name, COUNT(app_id) AS appointment_count FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name, EXTRACT(MONTH FROM app_date) ORDER BY appointment_count DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the list of doctors who have appointments only in the afternoon.",
		"sql_query": "SELECT DISTINCT d.doc_name FROM hospital.doctors d JOIN hospital.appointments a ON d.doc_id = a.doc_id WHERE EXTRACT(HOUR FROM a.app_time) >= 12 AND d.doc_id NOT IN (SELECT doc_id FROM hospital.appointments WHERE EXTRACT(HOUR FROM app_time) < 12);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find the patients who have visited the most different doctors.",
		"sql_query": "SELECT pat_name, COUNT(DISTINCT doc_id) AS doctor_count FROM hospital.patients JOIN hospital.appointments ON patients.pat_id = appointments.pat_id GROUP BY pat_name ORDER BY doctor_count DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the doctors with the longest interval between appointments.",
		"sql_query": "SELECT doc_name, MAX(app_date) - MIN(app_date) AS longest_interval FROM hospital.doctors JOIN hospital.appointments ON doctors.doc_id = appointments.doc_id GROUP BY doc_name ORDER BY longest_interval DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Find the average number of appointments per patient.",
		"sql_query": "SELECT AVG(appointment_count) FROM (SELECT pat_id, COUNT(app_id) AS appointment_count FROM hospital.appointments GROUP BY pat_id) AS subquery;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Get the most common appointment time across all doctors.",
		"sql_query": "SELECT app_time, COUNT(app_id) AS frequency FROM hospital.appointments GROUP BY app_time ORDER BY frequency DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "Retrieve the list of patients who have appointments on the same day with more than one doctor.",
		"sql_query": "SELECT DISTINCT p.pat_name FROM hospital.patients p JOIN hospital.appointments a ON p.pat_id = a.pat_id JOIN (SELECT pat_id, app_date, COUNT(DISTINCT doc_id) AS doctor_count FROM hospital.appointments GROUP BY pat_id, app_date HAVING doctor_count > 1) AS subquery ON p.pat_id = subquery.pat_id AND a.app_date = subquery.app_date;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    dept_id SERIAL PRIMARY KEY,\n    dept_name VARCHAR(255) NOT NULL UNIQUE,\n    dept_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doc_id SERIAL PRIMARY KEY,\n    doc_name VARCHAR(255) NOT NULL,\n    doc_specialization VARCHAR(255) NOT NULL,\n    dept_id INT NOT NULL,\n    FOREIGN KEY (dept_id) REFERENCES hospital.departments(dept_id)\n);\n\nCREATE TABLE hospital.patients (\n    pat_id SERIAL PRIMARY KEY,\n    pat_name VARCHAR(255) NOT NULL,\n    pat_dob DATE NOT NULL,\n    pat_address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    app_id SERIAL PRIMARY KEY,\n    pat_id INT REFERENCES hospital.patients(pat_id),\n    doc_id INT REFERENCES hospital.doctors(doc_id),\n    app_date DATE NOT NULL,\n    app_time TIME NOT NULL,\n    is_first_visit BOOLEAN NOT NULL DEFAULT false,\n    CONSTRAINT appointment_unique UNIQUE (pat_id, doc_id, app_date, app_time)\n);\n"
	},
	{
		"question": "List all products with their categories.",
		"sql_query": "SELECT product_name, category_name FROM ecommerce.products JOIN ecommerce.categories ON products.category_id = categories.category_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all customers who have placed an order.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the total number of products in each category.",
		"sql_query": "SELECT category_name, COUNT(product_id) AS total_products FROM ecommerce.categories LEFT JOIN ecommerce.products ON categories.category_id = products.category_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Select all customers who have never placed an order.",
		"sql_query": "SELECT customer_name FROM ecommerce.customers LEFT JOIN ecommerce.orders ON customers.customer_id = orders.customer_id WHERE orders.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all orders with a total amount greater than $1000.",
		"sql_query": "SELECT order_id, total_amount FROM ecommerce.orders WHERE total_amount > 1000;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all categories and the number of products in each.",
		"sql_query": "SELECT category_name, COUNT(products.product_id) AS number_of_products FROM ecommerce.categories LEFT JOIN ecommerce.products ON categories.category_id = products.category_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get all products ordered by a specific customer named 'Alice Johnson'.",
		"sql_query": "SELECT product_name FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id JOIN ecommerce.orders ON order_items.order_id = orders.order_id JOIN ecommerce.customers ON orders.customer_id = customers.customer_id WHERE customer_name = 'Alice Johnson';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all customers who have ordered products from the 'Electronics' category.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id JOIN ecommerce.categories ON products.category_id = categories.category_id WHERE category_name = 'Electronics';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all orders placed in the last 30 days.",
		"sql_query": "SELECT order_id, order_date FROM ecommerce.orders WHERE order_date >= CURRENT_DATE - INTERVAL '30 days';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all products with stock quantities less than 10.",
		"sql_query": "SELECT product_name, stock_quantity FROM ecommerce.products WHERE stock_quantity < 10;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Select all categories and their descriptions.",
		"sql_query": "SELECT category_name, category_description FROM ecommerce.categories;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all customers who have placed more than 3 orders.",
		"sql_query": "SELECT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING COUNT(orders.order_id) > 3;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve products with a price higher than $50.",
		"sql_query": "SELECT product_name, price FROM ecommerce.products WHERE price > 50;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all orders and the number of items in each order.",
		"sql_query": "SELECT orders.order_id, COUNT(order_items.product_id) AS item_count FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the total revenue from all orders.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM ecommerce.orders;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Select products that have never been ordered.",
		"sql_query": "SELECT product_name FROM ecommerce.products LEFT JOIN ecommerce.order_items ON products.product_id = order_items.product_id WHERE order_items.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find the top 5 most expensive products.",
		"sql_query": "SELECT product_name, price FROM ecommerce.products ORDER BY price DESC LIMIT 5;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all customers and their email addresses.",
		"sql_query": "SELECT customer_name, email FROM ecommerce.customers;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve orders where the total amount is less than $200.",
		"sql_query": "SELECT order_id, total_amount FROM ecommerce.orders WHERE total_amount < 200;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all products with descriptions containing the word 'premium'.",
		"sql_query": "SELECT product_name, category_description FROM ecommerce.products JOIN ecommerce.categories ON products.category_id = categories.category_id WHERE category_description LIKE '%premium%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all orders with no items.",
		"sql_query": "SELECT orders.order_id FROM ecommerce.orders LEFT JOIN ecommerce.order_items ON orders.order_id = order_items.order_id WHERE order_items.product_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find products with a specific name 'Laptop'.",
		"sql_query": "SELECT product_name FROM ecommerce.products WHERE product_name = 'Laptop';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List the customers and their birth dates.",
		"sql_query": "SELECT customer_name, date_of_birth FROM ecommerce.customers;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve products with a stock quantity greater than 100.",
		"sql_query": "SELECT product_name FROM ecommerce.products WHERE stock_quantity > 100;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all orders placed by more than one customer.",
		"sql_query": "SELECT orders.order_id FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(DISTINCT orders.customer_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the average order total amount.",
		"sql_query": "SELECT AVG(total_amount) FROM ecommerce.orders;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find customers who have ordered products from more than one category.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id GROUP BY customer_name HAVING COUNT(DISTINCT products.category_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List products with prices between $10 and $100.",
		"sql_query": "SELECT product_name, price FROM ecommerce.products WHERE price BETWEEN 10 AND 100;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all customers who have ordered the same product more than once.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name, order_items.product_id HAVING COUNT(order_items.product_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all categories with no products.",
		"sql_query": "SELECT category_name FROM ecommerce.categories LEFT JOIN ecommerce.products ON categories.category_id = products.category_id WHERE products.product_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find the customers who have made purchases in every category.",
		"sql_query": "SELECT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id JOIN ecommerce.categories ON products.category_id = categories.category_id GROUP BY customer_name HAVING COUNT(DISTINCT categories.category_id) = (SELECT COUNT(category_id) FROM ecommerce.categories);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the products that are out of stock.",
		"sql_query": "SELECT product_name FROM ecommerce.products WHERE stock_quantity = 0;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all products and their respective total sales quantity.",
		"sql_query": "SELECT product_name, SUM(order_items.quantity) AS total_sales FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY product_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find customers who have never ordered a product from the 'Home Appliances' category.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers WHERE customer_id NOT IN (SELECT customer_id FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id WHERE products.category_id = (SELECT category_id FROM ecommerce.categories WHERE category_name = 'Home Appliances'));",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the total quantity of products sold for each category.",
		"sql_query": "SELECT category_name, SUM(order_items.quantity) AS total_quantity FROM ecommerce.categories JOIN ecommerce.products ON categories.category_id = products.category_id JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List customers who have purchased more than 100 units of any product.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name, order_items.product_id HAVING SUM(order_items.quantity) > 100;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all orders placed by customers older than 40 years.",
		"sql_query": "SELECT order_id, customer_name FROM ecommerce.orders JOIN ecommerce.customers ON orders.customer_id = customers.customer_id WHERE DATE_PART('year', AGE(customers.date_of_birth)) > 40;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all products ordered on a specific date '2023-07-15'.",
		"sql_query": "SELECT product_name FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id JOIN ecommerce.orders ON order_items.order_id = orders.order_id WHERE order_date = '2023-07-15';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the list of products with no sales in the last month.",
		"sql_query": "SELECT product_name FROM ecommerce.products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM ecommerce.order_items JOIN ecommerce.orders ON order_items.order_id = orders.order_id WHERE order_date >= CURRENT_DATE - INTERVAL '1 month');",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find the most frequently purchased product.",
		"sql_query": "SELECT product_name FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY product_name ORDER BY SUM(order_items.quantity) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List the customers who have spent the most money.",
		"sql_query": "SELECT customer_name, SUM(total_amount) AS total_spent FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name ORDER BY total_spent DESC;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the products with sales over $1000.",
		"sql_query": "SELECT product_name, SUM(order_items.quantity * order_items.item_price) AS total_sales FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY product_name HAVING total_sales > 1000;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all products with a name starting with 'S'.",
		"sql_query": "SELECT product_name FROM ecommerce.products WHERE product_name LIKE 'S%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List customers and the number of orders they have placed.",
		"sql_query": "SELECT customer_name, COUNT(orders.order_id) AS order_count FROM ecommerce.customers LEFT JOIN ecommerce.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find customers who have ordered in consecutive months.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id WHERE EXISTS (SELECT 1 FROM ecommerce.orders o2 WHERE o2.customer_id = orders.customer_id AND DATE_PART('month', o2.order_date) = DATE_PART('month', orders.order_date) + 1 AND DATE_PART('year', o2.order_date) = DATE_PART('year', orders.order_date));",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List products and the number of times they have been ordered.",
		"sql_query": "SELECT product_name, COUNT(order_items.order_id) AS times_ordered FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY product_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the total number of products sold per category.",
		"sql_query": "SELECT category_name, SUM(order_items.quantity) AS total_sold FROM ecommerce.categories JOIN ecommerce.products ON categories.category_id = products.category_id JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all products with no orders.",
		"sql_query": "SELECT product_name FROM ecommerce.products LEFT JOIN ecommerce.order_items ON products.product_id = order_items.product_id WHERE order_items.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve customers with orders worth more than $500.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id WHERE total_amount > 500;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List the customers with the highest average order value.",
		"sql_query": "SELECT customer_name, AVG(total_amount) AS average_order_value FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name ORDER BY average_order_value DESC;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find orders containing products from multiple categories.",
		"sql_query": "SELECT orders.order_id FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id GROUP BY orders.order_id HAVING COUNT(DISTINCT products.category_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the total number of products ordered in each month.",
		"sql_query": "SELECT DATE_TRUNC('month', order_date) AS month, SUM(order_items.quantity) AS total_products FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY month ORDER BY month;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find the customer with the most orders.",
		"sql_query": "SELECT customer_name, COUNT(orders.order_id) AS order_count FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name ORDER BY order_count DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get all orders placed by customers living in 'New York'.",
		"sql_query": "SELECT order_id FROM ecommerce.orders JOIN ecommerce.customers ON orders.customer_id = customers.customer_id WHERE customers.address LIKE '%New York%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all orders with at least one product from the 'Furniture' category.",
		"sql_query": "SELECT DISTINCT orders.order_id FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id WHERE products.category_id = (SELECT category_id FROM ecommerce.categories WHERE category_name = 'Furniture');",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all customers who ordered more than 5 unique products.",
		"sql_query": "SELECT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name HAVING COUNT(DISTINCT order_items.product_id) > 5;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all categories and their respective total revenue.",
		"sql_query": "SELECT category_name, SUM(order_items.quantity * order_items.item_price) AS total_revenue FROM ecommerce.categories JOIN ecommerce.products ON categories.category_id = products.category_id JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the list of orders where the total amount is equal to zero.",
		"sql_query": "SELECT order_id FROM ecommerce.orders WHERE total_amount = 0;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find all customers who have ordered in the last year.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id WHERE order_date >= CURRENT_DATE - INTERVAL '1 year';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the products that have been ordered more than 50 times.",
		"sql_query": "SELECT product_name FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id GROUP BY product_name HAVING SUM(order_items.quantity) > 50;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all customers who have purchased the same product on two different orders.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id WHERE order_items.product_id IN (SELECT product_id FROM ecommerce.order_items GROUP BY product_id, order_id HAVING COUNT(DISTINCT order_id) > 1);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Get the list of customers who have never ordered products from the 'Clothing' category.",
		"sql_query": "SELECT DISTINCT customer_name FROM ecommerce.customers WHERE customer_id NOT IN (SELECT customer_id FROM ecommerce.orders JOIN ecommerce.order_items ON orders.order_id = order_items.order_id JOIN ecommerce.products ON order_items.product_id = products.product_id WHERE products.category_id = (SELECT category_id FROM ecommerce.categories WHERE category_name = 'Clothing'));",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Find products that have been ordered by customers who live in 'California'.",
		"sql_query": "SELECT DISTINCT product_name FROM ecommerce.products JOIN ecommerce.order_items ON products.product_id = order_items.product_id JOIN ecommerce.orders ON order_items.order_id = orders.order_id JOIN ecommerce.customers ON orders.customer_id = customers.customer_id WHERE customers.address LIKE '%California%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all customers who have placed orders with exactly three different products.",
		"sql_query": "SELECT customer_name FROM ecommerce.customers JOIN ecommerce.orders ON customers.customer_id = orders.customer_id JOIN ecommerce.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name HAVING COUNT(DISTINCT order_items.product_id) = 3;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "Retrieve all orders with a total amount greater than the average order amount.",
		"sql_query": "SELECT order_id, total_amount FROM ecommerce.orders WHERE total_amount > (SELECT AVG(total_amount) FROM ecommerce.orders);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all categories and the average price of products within each category.",
		"sql_query": "SELECT category_name, AVG(price) AS average_price FROM ecommerce.categories JOIN ecommerce.products ON categories.category_id = products.category_id GROUP BY category_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE ecommerce.categories (\n    category_id SERIAL PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL UNIQUE,\n    category_description VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL,\n    category_id INT NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES ecommerce.categories(category_id)\n);\n\nCREATE TABLE ecommerce.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    date_of_birth DATE NOT NULL,\n    address VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE ecommerce.orders (\n    order_id SERIAL PRIMARY KEY,\n    order_date DATE NOT NULL,\n    customer_id INT REFERENCES ecommerce.customers(customer_id),\n    total_amount DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_customer_unique UNIQUE (order_id, customer_id)\n);\n\nCREATE TABLE ecommerce.order_items (\n    order_id INT REFERENCES ecommerce.orders(order_id),\n    product_id INT REFERENCES ecommerce.products(product_id),\n    quantity INT NOT NULL,\n    item_price DECIMAL(10, 2) NOT NULL,\n    CONSTRAINT order_product_unique PRIMARY KEY (order_id, product_id)\n);\n"
	},
	{
		"question": "List all departments and their heads.",
		"sql_query": "SELECT department_name, department_head FROM university.departments;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all professors in the 'Computer Science' department.",
		"sql_query": "SELECT professor_name FROM university.professors JOIN university.departments ON professors.department_id = departments.department_id WHERE department_name = 'Computer Science';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all courses with their respective credits.",
		"sql_query": "SELECT course_name, credits FROM university.courses;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all students who enrolled in the year 2020.",
		"sql_query": "SELECT student_name FROM university.students WHERE enrollment_year = 2020;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students majoring in 'Biology'.",
		"sql_query": "SELECT student_name FROM university.students JOIN university.departments ON students.major_id = departments.department_id WHERE department_name = 'Biology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Get the total number of courses in each department.",
		"sql_query": "SELECT department_name, COUNT(course_id) AS total_courses FROM university.departments LEFT JOIN university.courses ON departments.department_id = courses.department_id GROUP BY department_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Select all students who have never enrolled in any course.",
		"sql_query": "SELECT student_name FROM university.students LEFT JOIN university.enrollments ON students.student_id = enrollments.student_id WHERE enrollments.enrollment_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all enrollments with grades 'A'.",
		"sql_query": "SELECT student_name, course_name FROM university.enrollments JOIN university.students ON enrollments.student_id = students.student_id JOIN university.courses ON enrollments.course_id = courses.course_id WHERE grade = 'A';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all courses offered by the 'Physics' department.",
		"sql_query": "SELECT course_name FROM university.courses JOIN university.departments ON courses.department_id = departments.department_id WHERE department_name = 'Physics';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all students enrolled in 'Introduction to Psychology'.",
		"sql_query": "SELECT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id WHERE course_name = 'Introduction to Psychology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students and their respective majors.",
		"sql_query": "SELECT student_name, department_name AS major FROM university.students JOIN university.departments ON students.major_id = departments.department_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find the professor with the most courses taught.",
		"sql_query": "SELECT professor_name, COUNT(course_id) AS courses_taught FROM university.professors JOIN university.courses ON professors.department_id = courses.department_id GROUP BY professor_name ORDER BY courses_taught DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve the average grade for each course.",
		"sql_query": "SELECT course_name, AVG(CASE WHEN grade IS NOT NULL THEN grade ELSE 0 END) AS average_grade FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students with their total number of enrolled credits.",
		"sql_query": "SELECT student_name, SUM(credits) AS total_credits FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id GROUP BY student_name;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find the student with the highest number of credits earned.",
		"sql_query": "SELECT student_name, SUM(credits) AS total_credits FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id GROUP BY student_name ORDER BY total_credits DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Get all courses taken by the student 'John Doe'.",
		"sql_query": "SELECT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id JOIN university.students ON enrollments.student_id = students.student_id WHERE student_name = 'John Doe';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all courses not taken by any student.",
		"sql_query": "SELECT course_name FROM university.courses LEFT JOIN university.enrollments ON courses.course_id = enrollments.course_id WHERE enrollments.enrollment_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all professors with no courses assigned.",
		"sql_query": "SELECT professor_name FROM university.professors LEFT JOIN university.courses ON professors.department_id = courses.department_id WHERE courses.course_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve students who have taken more than 5 courses.",
		"sql_query": "SELECT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id GROUP BY student_name HAVING COUNT(enrollments.course_id) > 5;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all departments with no professors.",
		"sql_query": "SELECT department_name FROM university.departments LEFT JOIN university.professors ON departments.department_id = professors.department_id WHERE professors.professor_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List students who received a 'B' grade in any course.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id WHERE grade = 'B';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all students who have taken at least one course with 'Smith' as the professor.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id JOIN university.professors ON courses.department_id = professors.department_id WHERE professor_name LIKE '%Smith%';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find the total number of students enrolled in 'Chemistry'.",
		"sql_query": "SELECT COUNT(DISTINCT student_id) AS total_students FROM university.enrollments JOIN university.courses ON enrollments.course_id = courses.course_id JOIN university.departments ON courses.department_id = departments.department_id WHERE department_name = 'Chemistry';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students who are majoring in a department with no courses.",
		"sql_query": "SELECT student_name FROM university.students JOIN university.departments ON students.major_id = departments.department_id LEFT JOIN university.courses ON departments.department_id = courses.department_id WHERE courses.course_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all courses taught by professors who are department heads.",
		"sql_query": "SELECT course_name FROM university.courses JOIN university.professors ON courses.department_id = professors.department_id JOIN university.departments ON professors.department_id = departments.department_id WHERE professors.professor_name = departments.department_head;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all departments with more than 100 students.",
		"sql_query": "SELECT department_name FROM university.departments JOIN university.students ON departments.department_id = students.major_id GROUP BY department_name HAVING COUNT(student_id) > 100;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve students who have received grades lower than 'C' in any course.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id WHERE grade < 'C';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all students with no grades assigned yet.",
		"sql_query": "SELECT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id WHERE grade IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List professors who have taught courses in more than one department.",
		"sql_query": "SELECT DISTINCT professor_name FROM university.professors JOIN university.courses ON professors.department_id = courses.department_id GROUP BY professor_name HAVING COUNT(DISTINCT courses.department_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all courses with students enrolled from different majors.",
		"sql_query": "SELECT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id JOIN university.students ON enrollments.student_id = students.student_id GROUP BY course_name HAVING COUNT(DISTINCT students.major_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find the department with the highest average grade.",
		"sql_query": "SELECT department_name, AVG(CASE WHEN grade IS NOT NULL THEN grade ELSE 0 END) AS average_grade FROM university.departments JOIN university.courses ON departments.department_id = courses.department_id JOIN university.enrollments ON courses.course_id = enrollments.course_id GROUP BY department_name ORDER BY average_grade DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students with no assigned major.",
		"sql_query": "SELECT student_name FROM university.students WHERE major_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all courses that are prerequisites for other courses.",
		"sql_query": "SELECT DISTINCT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id WHERE courses.course_id IN (SELECT prerequisite_id FROM university.prerequisites);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve students who have completed all courses in their major.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id WHERE students.major_id = courses.department_id GROUP BY student_name HAVING COUNT(DISTINCT courses.course_id) = (SELECT COUNT(course_id) FROM university.courses WHERE department_id = students.major_id);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all students with identical names.",
		"sql_query": "SELECT student_name, COUNT(*) AS name_count FROM university.students GROUP BY student_name HAVING name_count > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find students who have dropped out (no current enrollments).",
		"sql_query": "SELECT student_name FROM university.students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM university.enrollments);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all courses taught in the 'Fall' semester.",
		"sql_query": "SELECT DISTINCT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id WHERE EXTRACT(MONTH FROM enrollment_date) BETWEEN 9 AND 12;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find the total number of enrollments for each year.",
		"sql_query": "SELECT EXTRACT(YEAR FROM enrollment_date) AS year, COUNT(*) AS total_enrollments FROM university.enrollments GROUP BY year ORDER BY year;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all courses with more than 50 students enrolled.",
		"sql_query": "SELECT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id GROUP BY course_name HAVING COUNT(enrollments.student_id) > 50;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve all professors who have not taught any courses.",
		"sql_query": "SELECT professor_name FROM university.professors WHERE professor_id NOT IN (SELECT DISTINCT professor_id FROM university.courses);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find all students who have taken courses in every department.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id GROUP BY student_name HAVING COUNT(DISTINCT courses.department_id) = (SELECT COUNT(department_id) FROM university.departments);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve students who have enrolled in courses taught by multiple professors.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students JOIN university.enrollments ON students.student_id = enrollments.student_id JOIN university.courses ON enrollments.course_id = courses.course_id GROUP BY student_name HAVING COUNT(DISTINCT courses.professor_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find courses that have been canceled (no enrollments).",
		"sql_query": "SELECT course_name FROM university.courses WHERE course_id NOT IN (SELECT DISTINCT course_id FROM university.enrollments);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List students who have completed their major requirements.",
		"sql_query": "SELECT DISTINCT student_name FROM university.students WHERE student_id IN (SELECT student_id FROM university.enrollments JOIN university.courses ON enrollments.course_id = courses.course_id WHERE courses.department_id = students.major_id GROUP BY student_id HAVING COUNT(DISTINCT courses.course_id) = (SELECT COUNT(course_id) FROM university.courses WHERE department_id = students.major_id));",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Find professors who teach multiple sections of the same course.",
		"sql_query": "SELECT professor_name FROM university.professors JOIN university.courses ON professors.professor_id = courses.professor_id GROUP BY professor_name, course_name HAVING COUNT(DISTINCT courses.course_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.enrollments (\n    enrollment_id SERIAL PRIMARY KEY,\n    student_id INT NOT NULL,\n    course_id INT NOT NULL,\n    enrollment_date DATE NOT NULL,\n    grade VARCHAR(2),\n    FOREIGN KEY (student_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "Retrieve courses that are corequisites with other courses.",
		"sql_query": "SELECT DISTINCT course_name FROM university.courses JOIN university.enrollments ON courses.course_id = enrollments.course_id WHERE courses.course_id IN (SELECT corequisite_id FROM university.corequisites);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE university.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    department_head VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE university.professors (\n    professor_id SERIAL PRIMARY KEY,\n    professor_name VARCHAR(255) NOT NULL,\n    professor_email VARCHAR(255) NOT NULL UNIQUE,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.courses (\n    course_id SERIAL PRIMARY KEY,\n    course_name VARCHAR(255) NOT NULL,\n    credits INT NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES university.departments(department_id)\n);\n\nCREATE TABLE university.students (\n    student_id SERIAL PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    student_email VARCHAR(255) NOT NULL UNIQUE,\n    enrollment_year INT NOT NULL,\n    major_id INT NOT NULL,\n    FOREIGN KEY (major_id) REFERENCES university.students(student_id),\n    FOREIGN KEY (course_id) REFERENCES university.courses(course_id)\n);\n"
	},
	{
		"question": "List all departments and their locations.",
		"sql_query": "SELECT department_name, location FROM hospital.departments;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all doctors specializing in 'Cardiology'.",
		"sql_query": "SELECT doctor_name FROM hospital.doctors WHERE specialty = 'Cardiology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all patients born before 1990.",
		"sql_query": "SELECT patient_name FROM hospital.patients WHERE dob < '1990-01-01';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all appointments with a diagnosis of 'Flu'.",
		"sql_query": "SELECT appointment_id, patient_name, appointment_date FROM hospital.appointments JOIN hospital.patients ON appointments.patient_id = patients.patient_id WHERE diagnosis = 'Flu';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all prescriptions with the medication 'Ibuprofen'.",
		"sql_query": "SELECT prescription_id, dosage FROM hospital.prescriptions WHERE medication = 'Ibuprofen';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all patients with at least one appointment.",
		"sql_query": "SELECT DISTINCT patient_name FROM hospital.patients JOIN hospital.appointments ON patients.patient_id = appointments.patient_id;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all doctors who have appointments scheduled for today.",
		"sql_query": "SELECT DISTINCT doctor_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doctor_id = appointments.doctor_id WHERE appointment_date = CURRENT_DATE;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all female patients.",
		"sql_query": "SELECT patient_name FROM hospital.patients WHERE gender = 'F';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all male patients.",
		"sql_query": "SELECT patient_name FROM hospital.patients WHERE gender = 'M';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all appointments scheduled for the next 7 days.",
		"sql_query": "SELECT appointment_id, patient_name, appointment_date FROM hospital.appointments JOIN hospital.patients ON appointments.patient_id = patients.patient_id WHERE appointment_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all prescriptions related to the patient 'Jane Doe'.",
		"sql_query": "SELECT prescription_id, medication, dosage FROM hospital.prescriptions JOIN hospital.appointments ON prescriptions.appointment_id = appointments.appointment_id JOIN hospital.patients ON appointments.patient_id = patients.patient_id WHERE patient_name = 'Jane Doe';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find all departments without any doctors.",
		"sql_query": "SELECT department_name FROM hospital.departments LEFT JOIN hospital.doctors ON departments.department_id = doctors.department_id WHERE doctors.doctor_id IS NULL;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Retrieve doctors who have not prescribed any medications.",
		"sql_query": "SELECT DISTINCT doctor_name FROM hospital.doctors WHERE doctor_id NOT IN (SELECT DISTINCT doctor_id FROM hospital.appointments JOIN hospital.prescriptions ON appointments.appointment_id = prescriptions.appointment_id);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all doctors with more than 10 patients.",
		"sql_query": "SELECT doctor_name FROM hospital.doctors JOIN hospital.appointments ON doctors.doctor_id = appointments.doctor_id GROUP BY doctor_name HAVING COUNT(DISTINCT patient_id) > 10;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Find patients who have appointments with more than one doctor.",
		"sql_query": "SELECT DISTINCT patient_name FROM hospital.patients JOIN hospital.appointments ON patients.patient_id = appointments.patient_id GROUP BY patient_name HAVING COUNT(DISTINCT doctor_id) > 1;",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "Retrieve all prescriptions for appointments in the 'Radiology' department.",
		"sql_query": "SELECT prescription_id, medication, dosage FROM hospital.prescriptions JOIN hospital.appointments ON prescriptions.appointment_id = appointments.appointment_id JOIN hospital.doctors ON appointments.doctor_id = doctors.doctor_id JOIN hospital.departments ON doctors.department_id = departments.department_id WHERE department_name = 'Radiology';",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all patients with no appointments scheduled.",
		"sql_query": "SELECT patient_name FROM hospital.patients WHERE patient_id NOT IN (SELECT DISTINCT patient_id FROM hospital.appointments);",
		"input": "\n\ndatabase schema:\n\nCREATE TABLE hospital.departments (\n    department_id SERIAL PRIMARY KEY,\n    department_name VARCHAR(255) NOT NULL UNIQUE,\n    location VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE hospital.doctors (\n    doctor_id SERIAL PRIMARY KEY,\n    doctor_name VARCHAR(255) NOT NULL,\n    specialty VARCHAR(255) NOT NULL,\n    department_id INT NOT NULL,\n    FOREIGN KEY (department_id) REFERENCES hospital.departments(department_id)\n);\n\nCREATE TABLE hospital.patients (\n    patient_id SERIAL PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    dob DATE NOT NULL,\n    gender CHAR(1) NOT NULL\n);\n\nCREATE TABLE hospital.appointments (\n    appointment_id SERIAL PRIMARY KEY,\n    patient_id INT NOT NULL,\n    doctor_id INT NOT NULL,\n    appointment_date DATE NOT NULL,\n    diagnosis TEXT,\n    FOREIGN KEY (patient_id) REFERENCES hospital.patients(patient_id),\n    FOREIGN KEY (doctor_id) REFERENCES hospital.doctors(doctor_id)\n);\n\nCREATE TABLE hospital.prescriptions (\n    prescription_id SERIAL PRIMARY KEY,\n    appointment_id INT NOT NULL,\n    medication VARCHAR(255) NOT NULL,\n    dosage VARCHAR(255) NOT NULL,\n    FOREIGN KEY (appointment_id) REFERENCES hospital.appointments(appointment_id)\n);\n"
	},
	{
		"question": "List all authors born after 1980.",
		"sql_query": "SELECT author_name FROM library.authors WHERE birthdate > '1980-01-01';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find all books published in the year 2000.",
		"sql_query": "SELECT title FROM library.books WHERE publication_year = 2000;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve all members who joined the library in 2023.",
		"sql_query": "SELECT member_name FROM library.members WHERE EXTRACT(YEAR FROM membership_date) = 2023;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find all loans that have not been returned yet.",
		"sql_query": "SELECT loan_id, member_name, title FROM library.loans JOIN library.members ON loans.member_id = members.member_id JOIN library.books ON loans.book_id = books.book_id WHERE return_date IS NULL;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all books written by 'J.K. Rowling'.",
		"sql_query": "SELECT title FROM library.books JOIN library.authors ON books.author_id = authors.author_id WHERE author_name = 'J.K. Rowling';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find all members who have borrowed more than five books.",
		"sql_query": "SELECT member_name FROM library.members JOIN library.loans ON members.member_id = loans.member_id GROUP BY member_name HAVING COUNT(loan_id) > 5;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve all authors who have written more than three books.",
		"sql_query": "SELECT author_name FROM library.authors JOIN library.books ON authors.author_id = books.author_id GROUP BY author_name HAVING COUNT(book_id) > 3;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all books in the 'Science Fiction' genre.",
		"sql_query": "SELECT title FROM library.books WHERE genre = 'Science Fiction';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find the most borrowed book in the library.",
		"sql_query": "SELECT title FROM library.books JOIN library.loans ON books.book_id = loans.book_id GROUP BY title ORDER BY COUNT(loan_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve all loans made by the member 'Alice Johnson'.",
		"sql_query": "SELECT loan_id, title FROM library.loans JOIN library.books ON loans.book_id = books.book_id JOIN library.members ON loans.member_id = members.member_id WHERE member_name = 'Alice Johnson';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all authors who have no books in the library.",
		"sql_query": "SELECT author_name FROM library.authors LEFT JOIN library.books ON authors.author_id = books.author_id WHERE books.book_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find all books that have been loaned out at least once.",
		"sql_query": "SELECT DISTINCT title FROM library.books JOIN library.loans ON books.book_id = loans.book_id;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve the total number of books in each genre.",
		"sql_query": "SELECT genre, COUNT(book_id) AS total_books FROM library.books GROUP BY genre;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all members who have never borrowed a book.",
		"sql_query": "SELECT member_name FROM library.members LEFT JOIN library.loans ON members.member_id = loans.member_id WHERE loans.loan_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find the book with the earliest publication year.",
		"sql_query": "SELECT title, publication_year FROM library.books ORDER BY publication_year ASC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve all loans made in the last month.",
		"sql_query": "SELECT loan_id, member_name, title FROM library.loans JOIN library.members ON loans.member_id = members.member_id JOIN library.books ON loans.book_id = books.book_id WHERE loan_date >= CURRENT_DATE - INTERVAL '1 month';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all books by authors born before 1970.",
		"sql_query": "SELECT title FROM library.books JOIN library.authors ON books.author_id = authors.author_id WHERE birthdate < '1970-01-01';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Find members with overdue loans (more than 30 days).",
		"sql_query": "SELECT member_name FROM library.members JOIN library.loans ON members.member_id = loans.member_id WHERE return_date IS NULL AND loan_date < CURRENT_DATE - INTERVAL '30 days';",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "Retrieve all books that have never been borrowed.",
		"sql_query": "SELECT title FROM library.books LEFT JOIN library.loans ON books.book_id = loans.book_id WHERE loans.loan_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all authors and the total number of books they have written.",
		"sql_query": "SELECT author_name, COUNT(book_id) AS total_books FROM library.authors JOIN library.books ON authors.author_id = books.author_id GROUP BY author_name;",
		"input": "\n\ndatabase schema:\n\n-- Create table for authors\nCREATE TABLE library.authors (\n    author_id SERIAL PRIMARY KEY,\n    author_name VARCHAR(255) NOT NULL UNIQUE,\n    birthdate DATE NOT NULL\n);\n\n-- Create table for books\nCREATE TABLE library.books (\n    book_id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    genre VARCHAR(100) NOT NULL,\n    publication_year INT NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES library.authors(author_id)\n);\n\n-- Create table for members\nCREATE TABLE library.members (\n    member_id SERIAL PRIMARY KEY,\n    member_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    membership_date DATE NOT NULL\n);\n\n-- Create table for loans\nCREATE TABLE library.loans (\n    loan_id SERIAL PRIMARY KEY,\n    book_id INT NOT NULL,\n    member_id INT NOT NULL,\n    loan_date DATE NOT NULL,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES library.books(book_id),\n    FOREIGN KEY (member_id) REFERENCES library.members(member_id)\n);\n\n\n  "
	},
	{
		"question": "List all guests who have booked a room.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all available rooms.",
		"sql_query": "SELECT room_number, room_type FROM hotel.rooms WHERE is_available = TRUE;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all bookings for the room with room number 101.",
		"sql_query": "SELECT booking_id, guest_name, check_in_date, check_out_date FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id JOIN hotel.rooms ON bookings.room_id = rooms.room_id WHERE room_number = 101;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all services that cost more than $50.",
		"sql_query": "SELECT service_name, service_price FROM hotel.services WHERE service_price > 50;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all guests with the email domain 'gmail.com'.",
		"sql_query": "SELECT guest_name FROM hotel.guests WHERE email LIKE '%@gmail.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all bookings with a check-in date in the next month.",
		"sql_query": "SELECT booking_id, guest_name, check_in_date FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE check_in_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '1 month';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of rooms of each type.",
		"sql_query": "SELECT room_type, COUNT(room_id) AS total_rooms FROM hotel.rooms GROUP BY room_type;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all bookings that include the service 'Spa'.",
		"sql_query": "SELECT DISTINCT booking_id, guest_name FROM hotel.booking_services JOIN hotel.bookings ON booking_services.booking_id = bookings.booking_id JOIN hotel.services ON booking_services.service_id = services.service_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE service_name = 'Spa';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all guests who have booked more than one room.",
		"sql_query": "SELECT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id GROUP BY guest_name HAVING COUNT(DISTINCT room_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all guests who have not made any bookings.",
		"sql_query": "SELECT guest_name FROM hotel.guests LEFT JOIN hotel.bookings ON guests.guest_id = bookings.guest_id WHERE bookings.booking_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all rooms with a price higher than the average room price.",
		"sql_query": "SELECT room_number, price_per_night FROM hotel.rooms WHERE price_per_night > (SELECT AVG(price_per_night) FROM hotel.rooms);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the most frequently booked room.",
		"sql_query": "SELECT room_number FROM hotel.rooms JOIN hotel.bookings ON rooms.room_id = bookings.room_id GROUP BY room_number ORDER BY COUNT(booking_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all bookings made by 'John Doe'.",
		"sql_query": "SELECT booking_id, room_number, check_in_date, check_out_date FROM hotel.bookings JOIN hotel.rooms ON bookings.room_id = rooms.room_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE guest_name = 'John Doe';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all services used in the booking with booking ID 10.",
		"sql_query": "SELECT service_name, quantity FROM hotel.booking_services JOIN hotel.services ON booking_services.service_id = services.service_id WHERE booking_id = 10;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all bookings that have used the 'Breakfast' service.",
		"sql_query": "SELECT DISTINCT booking_id, guest_name FROM hotel.booking_services JOIN hotel.bookings ON booking_services.booking_id = bookings.booking_id JOIN hotel.services ON booking_services.service_id = services.service_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE service_name = 'Breakfast';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all guests with phone numbers starting with '+1'.",
		"sql_query": "SELECT guest_name FROM hotel.guests WHERE phone_number LIKE '+1%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all room numbers with more than five bookings.",
		"sql_query": "SELECT room_number FROM hotel.rooms JOIN hotel.bookings ON rooms.room_id = bookings.room_id GROUP BY room_number HAVING COUNT(booking_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all guests who have booked a 'Suite'.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.rooms ON bookings.room_id = rooms.room_id WHERE room_type = 'Suite';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all rooms that have never been booked.",
		"sql_query": "SELECT room_number FROM hotel.rooms LEFT JOIN hotel.bookings ON rooms.room_id = bookings.room_id WHERE bookings.booking_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all services that have never been used.",
		"sql_query": "SELECT service_name FROM hotel.services LEFT JOIN hotel.booking_services ON services.service_id = booking_services.service_id WHERE booking_services.booking_service_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all guests with bookings that have more than three services.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id GROUP BY guest_name HAVING COUNT(booking_services.service_id) > 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the total revenue generated from room bookings.",
		"sql_query": "SELECT SUM(price_per_night * (check_out_date - check_in_date)) AS total_revenue FROM hotel.bookings JOIN hotel.rooms ON bookings.room_id = rooms.room_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all guests who have booked a room for more than a week.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id WHERE check_out_date - check_in_date > 7;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all bookings with check-out dates in the past.",
		"sql_query": "SELECT booking_id, guest_name, room_number FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id JOIN hotel.rooms ON bookings.room_id = rooms.room_id WHERE check_out_date < CURRENT_DATE;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all services used by guests named 'Alice Smith'.",
		"sql_query": "SELECT service_name, quantity FROM hotel.booking_services JOIN hotel.bookings ON booking_services.booking_id = bookings.booking_id JOIN hotel.services ON booking_services.service_id = services.service_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE guest_name = 'Alice Smith';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all bookings for rooms in the 'Deluxe' category.",
		"sql_query": "SELECT booking_id, guest_name, check_in_date, check_out_date FROM hotel.bookings JOIN hotel.rooms ON bookings.room_id = rooms.room_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE room_type = 'Deluxe';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all guests who have never used any services.",
		"sql_query": "SELECT guest_name FROM hotel.guests WHERE guest_id NOT IN (SELECT DISTINCT guest_id FROM hotel.bookings JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the most expensive service offered by the hotel.",
		"sql_query": "SELECT service_name, service_price FROM hotel.services ORDER BY service_price DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all guests who have bookings extending into the next month.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id WHERE check_out_date > CURRENT_DATE + INTERVAL '1 month';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the average length of stay for all bookings.",
		"sql_query": "SELECT AVG(check_out_date - check_in_date) AS average_stay_length FROM hotel.bookings;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all bookings for guests with a Gmail email address.",
		"sql_query": "SELECT booking_id, guest_name, check_in_date, check_out_date FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE email LIKE '%@gmail.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all rooms with a price lower than the average price.",
		"sql_query": "SELECT room_number, price_per_night FROM hotel.rooms WHERE price_per_night < (SELECT AVG(price_per_night) FROM hotel.rooms);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total number of bookings for each room type.",
		"sql_query": "SELECT room_type, COUNT(booking_id) AS total_bookings FROM hotel.rooms JOIN hotel.bookings ON rooms.room_id = bookings.room_id GROUP BY room_type;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all bookings that include more than one service.",
		"sql_query": "SELECT DISTINCT booking_id, guest_name FROM hotel.booking_services JOIN hotel.bookings ON booking_services.booking_id = bookings.booking_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id GROUP BY booking_id HAVING COUNT(service_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all guests who have stayed in a room with a price higher than $200.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.rooms ON bookings.room_id = rooms.room_id WHERE price_per_night > 200;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total number of services used by each guest.",
		"sql_query": "SELECT guest_name, COUNT(booking_services.service_id) AS total_services FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id GROUP BY guest_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the guest who has used the most services.",
		"sql_query": "SELECT guest_name, COUNT(booking_services.service_id) AS total_services FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id GROUP BY guest_name ORDER BY total_services DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all services provided during the last month.",
		"sql_query": "SELECT service_name, COUNT(booking_service_id) AS times_used FROM hotel.booking_services JOIN hotel.services ON booking_services.service_id = services.service_id JOIN hotel.bookings ON booking_services.booking_id = bookings.booking_id WHERE bookings.check_out_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY service_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from all services.",
		"sql_query": "SELECT SUM(service_price * quantity) AS total_service_revenue FROM hotel.booking_services JOIN hotel.services ON booking_services.service_id = services.service_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all guests who have stayed for more than 10 days in total.",
		"sql_query": "SELECT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id GROUP BY guest_name HAVING SUM(check_out_date - check_in_date) > 10;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all room types with less than 3 available rooms.",
		"sql_query": "SELECT room_type, COUNT(room_id) AS available_rooms FROM hotel.rooms WHERE is_available = TRUE GROUP BY room_type HAVING available_rooms < 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all bookings where the guest used exactly one service.",
		"sql_query": "SELECT booking_id, guest_name FROM hotel.bookings JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id JOIN hotel.guests ON bookings.guest_id = guests.guest_id GROUP BY booking_id, guest_name HAVING COUNT(booking_services.service_id) = 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all guests who have used the 'Laundry' service.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id JOIN hotel.booking_services ON bookings.booking_id = booking_services.booking_id JOIN hotel.services ON booking_services.service_id = services.service_id WHERE service_name = 'Laundry';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List the room type with the highest average revenue per booking.",
		"sql_query": "SELECT room_type, AVG(price_per_night * (check_out_date - check_in_date)) AS average_revenue FROM hotel.rooms JOIN hotel.bookings ON rooms.room_id = bookings.room_id GROUP BY room_type ORDER BY average_revenue DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the most frequently used service.",
		"sql_query": "SELECT service_name FROM hotel.services JOIN hotel.booking_services ON services.service_id = booking_services.service_id GROUP BY service_name ORDER BY COUNT(booking_service_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all bookings made by guests with a phone number ending in '555'.",
		"sql_query": "SELECT booking_id, guest_name FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE phone_number LIKE '%555';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all guests who have bookings spanning more than two weeks.",
		"sql_query": "SELECT DISTINCT guest_name FROM hotel.guests JOIN hotel.bookings ON guests.guest_id = bookings.guest_id WHERE check_out_date - check_in_date > 14;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all bookings made in the current year.",
		"sql_query": "SELECT booking_id, guest_name, check_in_date, check_out_date FROM hotel.bookings JOIN hotel.guests ON bookings.guest_id = guests.guest_id WHERE EXTRACT(YEAR FROM check_in_date) = EXTRACT(YEAR FROM CURRENT_DATE);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for guests\nCREATE TABLE hotel.guests (\n    guest_id SERIAL PRIMARY KEY,\n    guest_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL\n);\n\n-- Create table for rooms\nCREATE TABLE hotel.rooms (\n    room_id SERIAL PRIMARY KEY,\n    room_number INT NOT NULL UNIQUE,\n    room_type VARCHAR(50) NOT NULL,\n    price_per_night DECIMAL(10, 2) NOT NULL,\n    is_available BOOLEAN NOT NULL DEFAULT TRUE\n);\n\n-- Create table for bookings\nCREATE TABLE hotel.bookings (\n    booking_id SERIAL PRIMARY KEY,\n    guest_id INT NOT NULL,\n    room_id INT NOT NULL,\n    check_in_date DATE NOT NULL,\n    check_out_date DATE NOT NULL,\n    FOREIGN KEY (guest_id) REFERENCES hotel.guests(guest_id),\n    FOREIGN KEY (room_id) REFERENCES hotel.rooms(room_id)\n);\n\n-- Create table for services\nCREATE TABLE hotel.services (\n    service_id SERIAL PRIMARY KEY,\n    service_name VARCHAR(255) NOT NULL UNIQUE,\n    service_price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for booking_services\nCREATE TABLE hotel.booking_services (\n    booking_service_id SERIAL PRIMARY KEY,\n    booking_id INT NOT NULL,\n    service_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (booking_id) REFERENCES hotel.bookings(booking_id),\n    FOREIGN KEY (service_id) REFERENCES hotel.services(service_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers who have placed an order.",
		"sql_query": "SELECT DISTINCT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all restaurants offering Italian cuisine.",
		"sql_query": "SELECT restaurant_name FROM food.restaurants WHERE cuisine_type = 'Italian';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all dishes priced above $15.",
		"sql_query": "SELECT dish_name, price FROM food.dishes WHERE price > 15;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all orders placed in the last week.",
		"sql_query": "SELECT order_id, customer_name, order_date FROM food.orders JOIN food.customers ON orders.customer_id = customers.customer_id WHERE order_date >= CURRENT_DATE - INTERVAL '7 days';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers who have ordered from 'Pizza Palace'.",
		"sql_query": "SELECT DISTINCT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id JOIN food.restaurants ON orders.restaurant_id = restaurants.restaurant_id WHERE restaurant_name = 'Pizza Palace';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the most expensive dish on the menu.",
		"sql_query": "SELECT dish_name, price FROM food.dishes ORDER BY price DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders that include the dish 'Spaghetti Carbonara'.",
		"sql_query": "SELECT DISTINCT order_id, customer_name FROM food.order_items JOIN food.orders ON order_items.order_id = orders.order_id JOIN food.customers ON orders.customer_id = customers.customer_id JOIN food.dishes ON order_items.dish_id = dishes.dish_id WHERE dish_name = 'Spaghetti Carbonara';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers with an email ending in 'yahoo.com'.",
		"sql_query": "SELECT customer_name FROM food.customers WHERE email LIKE '%@yahoo.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all orders where the total amount exceeds $100.",
		"sql_query": "SELECT order_id, customer_name, total_amount FROM food.orders JOIN food.customers ON orders.customer_id = customers.customer_id WHERE total_amount > 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of dishes offered by each restaurant.",
		"sql_query": "SELECT restaurant_name, COUNT(dish_id) AS total_dishes FROM food.restaurants JOIN food.dishes ON restaurants.restaurant_id = dishes.restaurant_id GROUP BY restaurant_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all orders that include more than three items.",
		"sql_query": "SELECT order_id, customer_name FROM food.orders JOIN food.order_items ON orders.order_id = order_items.order_id JOIN food.customers ON orders.customer_id = customers.customer_id GROUP BY order_id HAVING COUNT(order_items.dish_id) > 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all customers who have never placed an order.",
		"sql_query": "SELECT customer_name FROM food.customers LEFT JOIN food.orders ON customers.customer_id = orders.customer_id WHERE orders.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all dishes with a price higher than the average dish price.",
		"sql_query": "SELECT dish_name, price FROM food.dishes WHERE price > (SELECT AVG(price) FROM food.dishes);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the most frequently ordered dish.",
		"sql_query": "SELECT dish_name FROM food.dishes JOIN food.order_items ON dishes.dish_id = order_items.dish_id GROUP BY dish_name ORDER BY COUNT(order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all orders made by 'Emily Johnson'.",
		"sql_query": "SELECT order_id, restaurant_name, order_date, total_amount FROM food.orders JOIN food.restaurants ON orders.restaurant_id = restaurants.restaurant_id JOIN food.customers ON orders.customer_id = customers.customer_id WHERE customer_name = 'Emily Johnson';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all dishes offered by 'Burger Haven'.",
		"sql_query": "SELECT dish_name FROM food.dishes JOIN food.restaurants ON dishes.restaurant_id = restaurants.restaurant_id WHERE restaurant_name = 'Burger Haven';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers with phone numbers starting with '+44'.",
		"sql_query": "SELECT customer_name FROM food.customers WHERE phone_number LIKE '+44%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all restaurants that have never received an order.",
		"sql_query": "SELECT restaurant_name FROM food.restaurants LEFT JOIN food.orders ON restaurants.restaurant_id = orders.restaurant_id WHERE orders.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all orders containing dishes from multiple restaurants.",
		"sql_query": "SELECT order_id, customer_name FROM food.orders JOIN food.order_items ON orders.order_id = order_items.order_id JOIN food.dishes ON order_items.dish_id = dishes.dish_id JOIN food.customers ON orders.customer_id = customers.customer_id GROUP BY order_id, customer_name HAVING COUNT(DISTINCT dishes.restaurant_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the total revenue generated by each restaurant.",
		"sql_query": "SELECT restaurant_name, SUM(total_amount) AS total_revenue FROM food.restaurants JOIN food.orders ON restaurants.restaurant_id = orders.restaurant_id GROUP BY restaurant_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers who have placed more than five orders.",
		"sql_query": "SELECT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING COUNT(order_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total number of dishes ordered by each customer.",
		"sql_query": "SELECT customer_name, SUM(order_items.quantity) AS total_dishes_ordered FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id JOIN food.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve the customer who has ordered the most dishes.",
		"sql_query": "SELECT customer_name, SUM(order_items.quantity) AS total_dishes_ordered FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id JOIN food.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name ORDER BY total_dishes_ordered DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all dishes ordered in the last 30 days.",
		"sql_query": "SELECT dish_name, COUNT(order_item_id) AS times_ordered FROM food.order_items JOIN food.dishes ON order_items.dish_id = dishes.dish_id JOIN food.orders ON order_items.order_id = orders.order_id WHERE orders.order_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY dish_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from all orders.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM food.orders;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers who have ordered more than $500 in total.",
		"sql_query": "SELECT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 500;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all dishes that have never been ordered.",
		"sql_query": "SELECT dish_name FROM food.dishes LEFT JOIN food.order_items ON dishes.dish_id = order_items.dish_id WHERE order_items.order_item_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total number of orders placed by each restaurant.",
		"sql_query": "SELECT restaurant_name, COUNT(order_id) AS total_orders FROM food.restaurants JOIN food.orders ON restaurants.restaurant_id = orders.restaurant_id GROUP BY restaurant_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders made by customers living in 'New York'.",
		"sql_query": "SELECT order_id, customer_name, order_date, total_amount FROM food.orders JOIN food.customers ON orders.customer_id = customers.customer_id WHERE address LIKE '%New York%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all dishes offered by restaurants in 'Los Angeles'.",
		"sql_query": "SELECT dish_name FROM food.dishes JOIN food.restaurants ON dishes.restaurant_id = restaurants.restaurant_id WHERE location = 'Los Angeles';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the average total amount of all orders.",
		"sql_query": "SELECT AVG(total_amount) AS average_order_total FROM food.orders;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers with a Gmail email address.",
		"sql_query": "SELECT customer_name FROM food.customers WHERE email LIKE '%@gmail.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all restaurants with more than 10 dishes on their menu.",
		"sql_query": "SELECT restaurant_name FROM food.restaurants JOIN food.dishes ON restaurants.restaurant_id = dishes.restaurant_id GROUP BY restaurant_name HAVING COUNT(dish_id) > 10;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total number of dishes ordered from each cuisine type.",
		"sql_query": "SELECT cuisine_type, SUM(order_items.quantity) AS total_dishes_ordered FROM food.restaurants JOIN food.dishes ON restaurants.restaurant_id = dishes.restaurant_id JOIN food.order_items ON dishes.dish_id = order_items.dish_id GROUP BY cuisine_type;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders that include at least one vegan dish.",
		"sql_query": "SELECT DISTINCT order_id, customer_name FROM food.orders JOIN food.order_items ON orders.order_id = order_items.order_id JOIN food.dishes ON order_items.dish_id = dishes.dish_id JOIN food.customers ON orders.customer_id = customers.customer_id WHERE dish_name LIKE '%Vegan%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers who have ordered from multiple restaurants.",
		"sql_query": "SELECT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING COUNT(DISTINCT orders.restaurant_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the restaurant with the highest total revenue.",
		"sql_query": "SELECT restaurant_name, SUM(total_amount) AS total_revenue FROM food.restaurants JOIN food.orders ON restaurants.restaurant_id = orders.restaurant_id GROUP BY restaurant_name ORDER BY total_revenue DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all dishes ordered more than 50 times.",
		"sql_query": "SELECT dish_name FROM food.dishes JOIN food.order_items ON dishes.dish_id = order_items.dish_id GROUP BY dish_name HAVING SUM(order_items.quantity) > 50;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all orders made by customers with a phone number ending in '1234'.",
		"sql_query": "SELECT order_id, customer_name FROM food.orders JOIN food.customers ON orders.customer_id = customers.customer_id WHERE phone_number LIKE '%1234';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find all restaurants with a total order amount greater than $1000.",
		"sql_query": "SELECT restaurant_name FROM food.restaurants JOIN food.orders ON restaurants.restaurant_id = orders.restaurant_id GROUP BY restaurant_name HAVING SUM(total_amount) > 1000;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers who have ordered a dish named 'Salad'.",
		"sql_query": "SELECT DISTINCT customer_name FROM food.customers JOIN food.orders ON customers.customer_id = orders.customer_id JOIN food.order_items ON orders.order_id = order_items.order_id JOIN food.dishes ON order_items.dish_id = dishes.dish_id WHERE dish_name = 'Salad';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List the most frequently ordered dish in the 'Chinese' cuisine type.",
		"sql_query": "SELECT dish_name FROM food.dishes JOIN food.restaurants ON dishes.restaurant_id = restaurants.restaurant_id JOIN food.order_items ON dishes.dish_id = order_items.dish_id WHERE cuisine_type = 'Chinese' GROUP BY dish_name ORDER BY COUNT(order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from orders placed in the last year.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM food.orders WHERE order_date >= CURRENT_DATE - INTERVAL '1 year';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders made by customers who have ordered more than 20 dishes in total.",
		"sql_query": "SELECT order_id, customer_name FROM food.orders JOIN food.customers ON orders.customer_id = customers.customer_id JOIN food.order_items ON orders.order_id = order_items.order_id GROUP BY order_id, customer_name HAVING SUM(order_items.quantity) > 20;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all dishes with a price lower than the average dish price.",
		"sql_query": "SELECT dish_name, price FROM food.dishes WHERE price < (SELECT AVG(price) FROM food.dishes);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE food.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for restaurants\nCREATE TABLE food.restaurants (\n    restaurant_id SERIAL PRIMARY KEY,\n    restaurant_name VARCHAR(255) NOT NULL,\n    location VARCHAR(255) NOT NULL,\n    cuisine_type VARCHAR(50) NOT NULL\n);\n\n-- Create table for dishes\nCREATE TABLE food.dishes (\n    dish_id SERIAL PRIMARY KEY,\n    dish_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    restaurant_id INT NOT NULL,\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for orders\nCREATE TABLE food.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    restaurant_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES food.customers(customer_id),\n    FOREIGN KEY (restaurant_id) REFERENCES food.restaurants(restaurant_id)\n);\n\n-- Create table for order_items\nCREATE TABLE food.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    dish_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES food.orders(order_id),\n    FOREIGN KEY (dish_id) REFERENCES food.dishes(dish_id)\n);\n\n\n\n  "
	},
	{
		"question": "List all customers who have placed an order.",
		"sql_query": "SELECT DISTINCT customer_name FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all flowers priced above $20.",
		"sql_query": "SELECT flower_name, price FROM flower_shop.flowers WHERE price > 20;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders placed in the last month.",
		"sql_query": "SELECT order_id, customer_name, order_date FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE order_date >= CURRENT_DATE - INTERVAL '1 month';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers who provide red flowers.",
		"sql_query": "SELECT DISTINCT supplier_name FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id JOIN flower_shop.flowers ON flower_suppliers.flower_id = flowers.flower_id WHERE color = 'Red';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the most expensive flower in the shop.",
		"sql_query": "SELECT flower_name, price FROM flower_shop.flowers ORDER BY price DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders that include the flower 'Rose'.",
		"sql_query": "SELECT DISTINCT order_id, customer_name FROM flower_shop.order_items JOIN flower_shop.orders ON order_items.order_id = orders.order_id JOIN flower_shop.customers ON orders.customer_id = customers.customer_id JOIN flower_shop.flowers ON order_items.flower_id = flowers.flower_id WHERE flower_name = 'Rose';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all customers with an email ending in 'hotmail.com'.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers WHERE email LIKE '%@hotmail.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all orders where the total amount exceeds $100.",
		"sql_query": "SELECT order_id, customer_name, total_amount FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE total_amount > 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of flowers supplied by each supplier.",
		"sql_query": "SELECT supplier_name, COUNT(flower_id) AS total_flowers FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id GROUP BY supplier_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all orders that include more than five items.",
		"sql_query": "SELECT order_id, customer_name FROM flower_shop.orders JOIN flower_shop.order_items ON orders.order_id = order_items.order_id JOIN flower_shop.customers ON orders.customer_id = customers.customer_id GROUP BY order_id HAVING COUNT(order_items.flower_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all customers who have never placed an order.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers LEFT JOIN flower_shop.orders ON customers.customer_id = orders.customer_id WHERE orders.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all flowers with a price higher than the average flower price.",
		"sql_query": "SELECT flower_name, price FROM flower_shop.flowers WHERE price > (SELECT AVG(price) FROM flower_shop.flowers);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the most frequently ordered flower.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers JOIN flower_shop.order_items ON flowers.flower_id = order_items.flower_id GROUP BY flower_name ORDER BY COUNT(order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all orders made by 'Alice Green'.",
		"sql_query": "SELECT order_id, order_date, total_amount FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE customer_name = 'Alice Green';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all flowers supplied by 'Floral Supply Co'.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers JOIN flower_shop.flower_suppliers ON flowers.flower_id = flower_suppliers.flower_id JOIN flower_shop.suppliers ON flower_suppliers.supplier_id = suppliers.supplier_id WHERE supplier_name = 'Floral Supply Co';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers with phone numbers starting with '+61'.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers WHERE phone_number LIKE '+61%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers that have never supplied a flower.",
		"sql_query": "SELECT supplier_name FROM flower_shop.suppliers LEFT JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id WHERE flower_suppliers.flower_supplier_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all orders containing flowers from multiple suppliers.",
		"sql_query": "SELECT order_id, customer_name FROM flower_shop.orders JOIN flower_shop.order_items ON orders.order_id = order_items.order_id JOIN flower_shop.flower_suppliers ON order_items.flower_id = flower_suppliers.flower_id JOIN flower_shop.customers ON orders.customer_id = customers.customer_id GROUP BY order_id, customer_name HAVING COUNT(DISTINCT flower_suppliers.supplier_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total revenue generated by all orders.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM flower_shop.orders;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all customers who have placed more than three orders.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING COUNT(order_id) > 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the total number of flowers ordered by each customer.",
		"sql_query": "SELECT customer_name, SUM(order_items.quantity) AS total_flowers_ordered FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id JOIN flower_shop.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the customer who has ordered the most flowers.",
		"sql_query": "SELECT customer_name, SUM(order_items.quantity) AS total_flowers_ordered FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id JOIN flower_shop.order_items ON orders.order_id = order_items.order_id GROUP BY customer_name ORDER BY total_flowers_ordered DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all flowers ordered in the last 60 days.",
		"sql_query": "SELECT flower_name, COUNT(order_item_id) AS times_ordered FROM flower_shop.order_items JOIN flower_shop.flowers ON order_items.flower_id = flowers.flower_id JOIN flower_shop.orders ON order_items.order_id = orders.order_id WHERE orders.order_date >= CURRENT_DATE - INTERVAL '60 days' GROUP BY flower_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from orders placed in the last year.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM flower_shop.orders WHERE order_date >= CURRENT_DATE - INTERVAL '1 year';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers who have ordered more than $200 in total.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id GROUP BY customer_name HAVING SUM(total_amount) > 200;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all flowers that have never been ordered.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers LEFT JOIN flower_shop.order_items ON flowers.flower_id = order_items.flower_id WHERE order_items.order_item_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the total number of orders placed by each supplier.",
		"sql_query": "SELECT supplier_name, COUNT(order_id) AS total_orders FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id JOIN flower_shop.order_items ON flower_suppliers.flower_id = order_items.flower_id JOIN flower_shop.orders ON order_items.order_id = orders.order_id GROUP BY supplier_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders made by customers living in 'Los Angeles'.",
		"sql_query": "SELECT order_id, customer_name, order_date, total_amount FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE address LIKE '%Los Angeles%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all flowers supplied by suppliers in 'New York'.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers JOIN flower_shop.flower_suppliers ON flowers.flower_id = flower_suppliers.flower_id JOIN flower_shop.suppliers ON flower_suppliers.supplier_id = suppliers.supplier_id WHERE suppliers.contact_number LIKE '212%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the average total amount of all orders.",
		"sql_query": "SELECT AVG(total_amount) AS average_order_total FROM flower_shop.orders;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers with a Gmail email address.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers WHERE email LIKE '%@gmail.com';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers with more than 5 flowers in their inventory.",
		"sql_query": "SELECT supplier_name FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id GROUP BY supplier_name HAVING COUNT(flower_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the total number of flowers supplied by each color.",
		"sql_query": "SELECT color, COUNT(flower_id) AS total_flowers_supplied FROM flower_shop.flowers JOIN flower_shop.flower_suppliers ON flowers.flower_id = flower_suppliers.flower_id GROUP BY color;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders that include at least one bouquet of roses.",
		"sql_query": "SELECT DISTINCT order_id, customer_name FROM flower_shop.orders JOIN flower_shop.order_items ON orders.order_id = order_items.order_id JOIN flower_shop.flowers ON order_items.flower_id = flowers.flower_id JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE flower_name LIKE '%Rose%';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all customers who have ordered from multiple suppliers.",
		"sql_query": "SELECT customer_name FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id JOIN flower_shop.order_items ON orders.order_id = order_items.order_id JOIN flower_shop.flower_suppliers ON order_items.flower_id = flower_suppliers.flower_id GROUP BY customer_name HAVING COUNT(DISTINCT flower_suppliers.supplier_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find the supplier with the highest total revenue.",
		"sql_query": "SELECT supplier_name, SUM(total_amount) AS total_revenue FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id JOIN flower_shop.order_items ON flower_suppliers.flower_id = order_items.flower_id JOIN flower_shop.orders ON order_items.order_id = orders.order_id GROUP BY supplier_name ORDER BY total_revenue DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all flowers ordered more than 30 times.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers JOIN flower_shop.order_items ON flowers.flower_id = order_items.flower_id GROUP BY flower_name HAVING SUM(order_items.quantity) > 30;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all orders made by customers with a phone number ending in '5678'.",
		"sql_query": "SELECT order_id, customer_name FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE phone_number LIKE '%5678';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all suppliers with a total order amount greater than $500.",
		"sql_query": "SELECT supplier_name FROM flower_shop.suppliers JOIN flower_shop.flower_suppliers ON suppliers.supplier_id = flower_suppliers.supplier_id JOIN flower_shop.order_items ON flower_suppliers.flower_id = order_items.flower_id JOIN flower_shop.orders ON order_items.order_id = orders.order_id GROUP BY supplier_name HAVING SUM(total_amount) > 500;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all customers who have ordered a flower named 'Tulip'.",
		"sql_query": "SELECT DISTINCT customer_name FROM flower_shop.customers JOIN flower_shop.orders ON customers.customer_id = orders.customer_id JOIN flower_shop.order_items ON orders.order_id = order_items.order_id JOIN flower_shop.flowers ON order_items.flower_id = flowers.flower_id WHERE flower_name = 'Tulip';",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List the most frequently ordered flower of the color 'White'.",
		"sql_query": "SELECT flower_name FROM flower_shop.flowers JOIN flower_shop.order_items ON flowers.flower_id = order_items.flower_id WHERE color = 'White' GROUP BY flower_name ORDER BY COUNT(order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all orders made by customers who have ordered more than 15 flowers in total.",
		"sql_query": "SELECT order_id, customer_name FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id JOIN flower_shop.order_items ON orders.order_id = order_items.order_id GROUP BY order_id, customer_name HAVING SUM(order_items.quantity) > 15;",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all flowers with a price lower than the average flower price.",
		"sql_query": "SELECT flower_name, price FROM flower_shop.flowers WHERE price < (SELECT AVG(price) FROM flower_shop.flowers);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "Find all orders made in the current year.",
		"sql_query": "SELECT order_id, customer_name, order_date, total_amount FROM flower_shop.orders JOIN flower_shop.customers ON orders.customer_id = customers.customer_id WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE);",
		"input": "\n\ndatabase schema:\n\n\n-- Create table for customers\nCREATE TABLE flower_shop.customers (\n    customer_id SERIAL PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL\n);\n\n-- Create table for flowers\nCREATE TABLE flower_shop.flowers (\n    flower_id SERIAL PRIMARY KEY,\n    flower_name VARCHAR(255) NOT NULL,\n    color VARCHAR(50) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create table for orders\nCREATE TABLE flower_shop.orders (\n    order_id SERIAL PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (customer_id) REFERENCES flower_shop.customers(customer_id)\n);\n\n-- Create table for order_items\nCREATE TABLE flower_shop.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    flower_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES flower_shop.orders(order_id),\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id)\n);\n\n-- Create table for suppliers\nCREATE TABLE flower_shop.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE\n);\n\n-- Create table for flower_suppliers\nCREATE TABLE flower_shop.flower_suppliers (\n    flower_supplier_id SERIAL PRIMARY KEY,\n    flower_id INT NOT NULL,\n    supplier_id INT NOT NULL,\n    FOREIGN KEY (flower_id) REFERENCES flower_shop.flowers(flower_id),\n    FOREIGN KEY (supplier_id) REFERENCES flower_shop.suppliers(supplier_id)\n);\n\n\n\n\n  "
	},
	{
		"question": "List all clients who have placed an order in the last year and are from 'Germany'.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id WHERE orders.order_date >= CURRENT_DATE - INTERVAL '1 year' AND clients.country = 'Germany';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all products that have been shipped at least 100 times.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.shipment_items ON products.product_id = shipment_items.product_id GROUP BY product_name HAVING SUM(shipment_items.quantity) >= 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all shipments that have used more than one delivery route.",
		"sql_query": "SELECT shipment_id FROM business.shipments_routes GROUP BY shipment_id HAVING COUNT(route_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers who supply more than three different products.",
		"sql_query": "SELECT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id GROUP BY supplier_name HAVING COUNT(DISTINCT product_id) > 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the top three clients with the highest total order amounts.",
		"sql_query": "SELECT client_name, SUM(total_amount) AS total_spent FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id GROUP BY client_name ORDER BY total_spent DESC LIMIT 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the average payment amount for all completed invoices.",
		"sql_query": "SELECT AVG(amount_paid) AS average_payment FROM business.payments JOIN business.invoices ON payments.invoice_id = invoices.invoice_id WHERE invoices.status = 'Completed';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all products that are supplied at a lower price than their selling price.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.supplier_products ON products.product_id = supplier_products.product_id WHERE supplier_products.supply_price < products.unit_price;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all clients who have overdue invoices.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id WHERE invoices.status = 'Overdue';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all shipments that have not been delivered yet and their estimated delivery route distance.",
		"sql_query": "SELECT shipment_id, SUM(delivery_routes.distance) AS total_distance FROM business.shipments JOIN business.shipments_routes ON shipments.shipment_id = shipments_routes.shipment_id JOIN business.delivery_routes ON shipments_routes.route_id = delivery_routes.route_id WHERE shipments.status = 'In Transit' GROUP BY shipment_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders that include more than five distinct products.",
		"sql_query": "SELECT order_id FROM business.orders JOIN business.order_items ON orders.order_id = order_items.order_id GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the most frequently supplied product by 'Global Traders Ltd'.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.supplier_products ON products.product_id = supplier_products.product_id JOIN business.suppliers ON supplier_products.supplier_id = suppliers.supplier_id WHERE suppliers.supplier_name = 'Global Traders Ltd' GROUP BY product_name ORDER BY SUM(supplier_products.supply_price) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total weight of products in each shipment.",
		"sql_query": "SELECT shipment_id, SUM(products.weight * shipment_items.quantity) AS total_weight FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id GROUP BY shipment_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients who have paid more than $5000 in a single payment.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id JOIN business.payments ON invoices.invoice_id = payments.invoice_id WHERE payments.amount_paid > 5000;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all shipments that include a product weighing over 50 kg.",
		"sql_query": "SELECT DISTINCT shipment_id FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id WHERE products.weight > 50;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all suppliers located in 'China' who supply electronics.",
		"sql_query": "SELECT DISTINCT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id WHERE suppliers.country = 'China' AND products.category = 'Electronics';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all products with a supply price greater than the average supply price.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.supplier_products ON products.product_id = supplier_products.product_id WHERE supplier_products.supply_price > (SELECT AVG(supply_price) FROM business.supplier_products);",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from shipments in the 'In Transit' status.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM business.shipments JOIN business.orders ON shipments.client_id = orders.client_id WHERE shipments.status = 'In Transit';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the most frequently ordered product by clients from 'France'.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id JOIN business.clients ON orders.client_id = clients.client_id WHERE clients.country = 'France' GROUP BY product_name ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders with a total amount higher than the average order amount.",
		"sql_query": "SELECT order_id FROM business.orders WHERE total_amount > (SELECT AVG(total_amount) FROM business.orders);",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all suppliers who supply at least three products in the 'Furniture' category.",
		"sql_query": "SELECT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id WHERE products.category = 'Furniture' GROUP BY supplier_name HAVING COUNT(DISTINCT products.product_id) >= 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all shipments delivered on time.",
		"sql_query": "SELECT shipment_id, delivery_date FROM business.shipments WHERE delivery_date <= CURRENT_DATE AND status = 'Delivered';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients with orders that contain products from more than one category.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id GROUP BY client_name HAVING COUNT(DISTINCT products.category) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the total number of distinct products supplied by each supplier.",
		"sql_query": "SELECT supplier_name, COUNT(DISTINCT product_id) AS total_products FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id GROUP BY supplier_name;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all clients who have received shipments using more than two delivery routes.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.shipments ON clients.client_id = shipments.client_id JOIN business.shipments_routes ON shipments.shipment_id = shipments_routes.shipment_id GROUP BY client_name HAVING COUNT(DISTINCT shipments_routes.route_id) > 2;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all products with a unit price lower than the average price of the same category.",
		"sql_query": "SELECT product_name, category FROM business.products WHERE unit_price < (SELECT AVG(unit_price) FROM business.products WHERE products.category = category);",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the supplier with the highest average supply price for electronics.",
		"sql_query": "SELECT supplier_name, AVG(supply_price) AS average_price FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id WHERE products.category = 'Electronics' GROUP BY supplier_name ORDER BY average_price DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of shipments in each status category.",
		"sql_query": "SELECT status, COUNT(shipment_id) AS total_shipments FROM business.shipments GROUP BY status;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders that include products weighing more than 100 kg in total.",
		"sql_query": "SELECT order_id FROM business.orders JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id GROUP BY order_id HAVING SUM(products.weight * order_items.quantity) > 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all clients with invoices totaling more than $10000 over the past year.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id WHERE invoices.invoice_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY client_name HAVING SUM(invoices.amount_due) > 10000;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all suppliers who have supplied products to more than five clients.",
		"sql_query": "SELECT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id GROUP BY supplier_name HAVING COUNT(DISTINCT orders.client_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all shipments that were delivered more than three days late.",
		"sql_query": "SELECT shipment_id, delivery_date FROM business.shipments WHERE delivery_date > shipment_date + INTERVAL '3 days' AND status = 'Delivered';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the most frequently used delivery route.",
		"sql_query": "SELECT route_name FROM business.delivery_routes JOIN business.shipments_routes ON delivery_routes.route_id = shipments_routes.route_id GROUP BY route_name ORDER BY COUNT(shipments_routes.shipment_route_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all clients who have ordered products in every category.",
		"sql_query": "SELECT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id GROUP BY client_name HAVING COUNT(DISTINCT products.category) = (SELECT COUNT(DISTINCT category) FROM business.products);",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all products that have never been shipped.",
		"sql_query": "SELECT product_name FROM business.products LEFT JOIN business.shipment_items ON products.product_id = shipment_items.product_id WHERE shipment_items.shipment_item_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all suppliers who have supplied products that have not been ordered in the last six months.",
		"sql_query": "SELECT DISTINCT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id LEFT JOIN business.order_items ON products.product_id = order_items.product_id LEFT JOIN business.orders ON order_items.order_id = orders.order_id WHERE orders.order_date < CURRENT_DATE - INTERVAL '6 months' OR orders.order_date IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of products in each order for clients from 'USA'.",
		"sql_query": "SELECT order_id, SUM(order_items.quantity) AS total_products FROM business.orders JOIN business.clients ON orders.client_id = clients.client_id JOIN business.order_items ON orders.order_id = order_items.order_id WHERE clients.country = 'USA' GROUP BY order_id;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients who have received shipments with products from at least three different suppliers.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.shipments ON clients.client_id = shipments.client_id JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id JOIN business.supplier_products ON products.product_id = supplier_products.product_id GROUP BY client_name HAVING COUNT(DISTINCT supplier_products.supplier_id) >= 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the average delivery time for shipments in the 'Delivered' status.",
		"sql_query": "SELECT AVG(delivery_date - shipment_date) AS average_delivery_time FROM business.shipments WHERE status = 'Delivered';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all products that have been ordered but not yet shipped.",
		"sql_query": "SELECT DISTINCT product_name FROM business.products JOIN business.order_items ON products.product_id = order_items.product_id LEFT JOIN business.shipment_items ON products.product_id = shipment_items.product_id WHERE shipment_items.shipment_item_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers who have not supplied any products in the last year.",
		"sql_query": "SELECT supplier_name FROM business.suppliers LEFT JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id LEFT JOIN business.order_items ON supplier_products.product_id = order_items.product_id LEFT JOIN business.orders ON order_items.order_id = orders.order_id WHERE orders.order_date < CURRENT_DATE - INTERVAL '1 year' OR orders.order_date IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all orders with an order date in the last quarter.",
		"sql_query": "SELECT order_id, order_date FROM business.orders WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(QUARTER FROM order_date) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all clients who have ordered every product in the 'Tools' category.",
		"sql_query": "SELECT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id WHERE products.category = 'Tools' GROUP BY client_name HAVING COUNT(DISTINCT products.product_id) = (SELECT COUNT(DISTINCT product_id) FROM business.products WHERE category = 'Tools');",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all shipments with products that exceed the total weight capacity of the route.",
		"sql_query": "SELECT shipment_id, SUM(products.weight * shipment_items.quantity) AS total_weight, delivery_routes.distance FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id JOIN business.shipments_routes ON shipments.shipment_id = shipments_routes.shipment_id JOIN business.delivery_routes ON shipments_routes.route_id = delivery_routes.route_id GROUP BY shipment_id, delivery_routes.distance HAVING total_weight > delivery_routes.distance;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the client with the highest average invoice amount.",
		"sql_query": "SELECT client_name, AVG(invoices.amount_due) AS average_invoice FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id GROUP BY client_name ORDER BY average_invoice DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all products that have been ordered at least ten times by the same client.",
		"sql_query": "SELECT DISTINCT product_name FROM business.products JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id JOIN business.clients ON orders.client_id = clients.client_id GROUP BY product_name, clients.client_id HAVING SUM(order_items.quantity) >= 10;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients who have orders with a total amount higher than $5000.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id WHERE orders.total_amount > 5000;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all suppliers who supply products that have been shipped more than 100 times.",
		"sql_query": "SELECT DISTINCT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id JOIN business.shipment_items ON products.product_id = shipment_items.product_id GROUP BY supplier_name HAVING COUNT(shipment_items.shipment_item_id) > 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the total number of clients in each country.",
		"sql_query": "SELECT country, COUNT(client_id) AS total_clients FROM business.clients GROUP BY country;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all products that have been supplied by multiple suppliers.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.supplier_products ON products.product_id = supplier_products.product_id GROUP BY product_name HAVING COUNT(DISTINCT supplier_id) > 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all clients who have placed more than five orders in the last month.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id WHERE orders.order_date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY client_name HAVING COUNT(order_id) > 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all shipments that include products with a unit price above $100.",
		"sql_query": "SELECT DISTINCT shipment_id FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id WHERE products.unit_price > 100;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers who supply products exclusively in the 'Clothing' category.",
		"sql_query": "SELECT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id WHERE products.category = 'Clothing' GROUP BY supplier_name HAVING COUNT(DISTINCT products.category) = 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the client with the most overdue invoices.",
		"sql_query": "SELECT client_name, COUNT(invoices.invoice_id) AS overdue_count FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id WHERE invoices.status = 'Overdue' GROUP BY client_name ORDER BY overdue_count DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all products that have been ordered in every shipment.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.shipment_items ON products.product_id = shipment_items.product_id GROUP BY product_name HAVING COUNT(DISTINCT shipment_id) = (SELECT COUNT(DISTINCT shipment_id) FROM business.shipments);",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders that include products from more than three suppliers.",
		"sql_query": "SELECT order_id FROM business.orders JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id JOIN business.supplier_products ON products.product_id = supplier_products.product_id GROUP BY order_id HAVING COUNT(DISTINCT supplier_products.supplier_id) > 3;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the average supply price for each product category.",
		"sql_query": "SELECT category, AVG(supply_price) AS average_supply_price FROM business.products JOIN business.supplier_products ON products.product_id = supplier_products.product_id GROUP BY category;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all clients who have made payments using more than two different methods.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id JOIN business.payments ON invoices.invoice_id = payments.invoice_id GROUP BY client_name HAVING COUNT(DISTINCT payment_method) > 2;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all shipments with a total value above $10000.",
		"sql_query": "SELECT shipment_id FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id GROUP BY shipment_id HAVING SUM(products.unit_price * shipment_items.quantity) > 10000;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the client who has received the most shipments.",
		"sql_query": "SELECT client_name, COUNT(shipment_id) AS total_shipments FROM business.clients JOIN business.shipments ON clients.client_id = shipments.client_id GROUP BY client_name ORDER BY total_shipments DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all suppliers who have supplied products that have been ordered by 'Global Enterprises'.",
		"sql_query": "SELECT DISTINCT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id JOIN business.clients ON orders.client_id = clients.client_id WHERE clients.client_name = 'Global Enterprises';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients who have never ordered any products.",
		"sql_query": "SELECT client_name FROM business.clients LEFT JOIN business.orders ON clients.client_id = orders.client_id WHERE orders.order_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the most common product category among shipped products.",
		"sql_query": "SELECT category FROM business.products JOIN business.shipment_items ON products.product_id = shipment_items.product_id GROUP BY category ORDER BY COUNT(shipment_items.shipment_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all shipments that include a product from 'Electronics Inc'.",
		"sql_query": "SELECT DISTINCT shipment_id FROM business.shipments JOIN business.shipment_items ON shipments.shipment_id = shipment_items.shipment_id JOIN business.products ON shipment_items.product_id = products.product_id JOIN business.supplier_products ON products.product_id = supplier_products.product_id JOIN business.suppliers ON supplier_products.supplier_id = suppliers.supplier_id WHERE suppliers.supplier_name = 'Electronics Inc';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders that were delivered using the 'Express' delivery route.",
		"sql_query": "SELECT DISTINCT order_id FROM business.orders JOIN business.shipments ON orders.client_id = shipments.client_id JOIN business.shipments_routes ON shipments.shipment_id = shipments_routes.shipment_id JOIN business.delivery_routes ON shipments_routes.route_id = delivery_routes.route_id WHERE delivery_routes.route_name = 'Express';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the supplier with the lowest average supply price for 'Furniture'.",
		"sql_query": "SELECT supplier_name, AVG(supply_price) AS average_supply_price FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id WHERE products.category = 'Furniture' GROUP BY supplier_name ORDER BY average_supply_price ASC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all clients who have never received an invoice.",
		"sql_query": "SELECT client_name FROM business.clients LEFT JOIN business.orders ON clients.client_id = orders.client_id LEFT JOIN business.invoices ON orders.order_id = invoices.order_id WHERE invoices.invoice_id IS NULL;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all suppliers who supply products that are shipped to 'United Kingdom'.",
		"sql_query": "SELECT DISTINCT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id JOIN business.shipment_items ON products.product_id = shipment_items.product_id JOIN business.shipments ON shipment_items.shipment_id = shipments.shipment_id JOIN business.clients ON shipments.client_id = clients.client_id WHERE clients.country = 'United Kingdom';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find the total revenue generated from clients in 'Australia'.",
		"sql_query": "SELECT SUM(total_amount) AS total_revenue FROM business.orders JOIN business.clients ON orders.client_id = clients.client_id WHERE clients.country = 'Australia';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve the most frequently ordered product in the last year.",
		"sql_query": "SELECT product_name FROM business.products JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id WHERE orders.order_date >= CURRENT_DATE - INTERVAL '1 year' GROUP BY product_name ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all orders that include products with dimensions larger than '100x100x100'.",
		"sql_query": "SELECT DISTINCT order_id FROM business.orders JOIN business.order_items ON orders.order_id = order_items.order_id JOIN business.products ON order_items.product_id = products.product_id WHERE products.dimensions > '100x100x100';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Find all clients who have made a payment using 'Credit Card'.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id JOIN business.payments ON invoices.invoice_id = payments.invoice_id WHERE payments.payment_method = 'Credit Card';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "Retrieve all suppliers who supply products exclusively to clients in 'Europe'.",
		"sql_query": "SELECT supplier_name FROM business.suppliers JOIN business.supplier_products ON suppliers.supplier_id = supplier_products.supplier_id JOIN business.products ON supplier_products.product_id = products.product_id JOIN business.order_items ON products.product_id = order_items.product_id JOIN business.orders ON order_items.order_id = orders.order_id JOIN business.clients ON orders.client_id = clients.client_id WHERE clients.country IN ('Germany', 'France', 'United Kingdom', 'Italy', 'Spain') GROUP BY supplier_name HAVING COUNT(DISTINCT clients.country) = 5;",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	},
	{
		"question": "List all clients with overdue invoices in the last month.",
		"sql_query": "SELECT DISTINCT client_name FROM business.clients JOIN business.orders ON clients.client_id = orders.client_id JOIN business.invoices ON orders.order_id = invoices.order_id WHERE invoices.due_date < CURRENT_DATE - INTERVAL '1 month' AND invoices.status = 'Overdue';",
		"input": "\n\ndatabase schema:\n\n\n-- Table for Clients\nCREATE TABLE business.clients (\n    client_id SERIAL PRIMARY KEY,\n    client_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15) NOT NULL,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL,\n    registration_date DATE NOT NULL\n);\n\n-- Table for Products\nCREATE TABLE business.products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category VARCHAR(100) NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    weight DECIMAL(10, 2) NOT NULL,\n    dimensions VARCHAR(50) NOT NULL\n);\n\n-- Table for Suppliers\nCREATE TABLE business.suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_number VARCHAR(15) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    country VARCHAR(50) NOT NULL\n);\n\n-- Table for Shipments\nCREATE TABLE business.shipments (\n    shipment_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    shipment_date DATE NOT NULL,\n    delivery_date DATE,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Shipment_Items\nCREATE TABLE business.shipment_items (\n    shipment_item_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Supplier_Products\nCREATE TABLE business.supplier_products (\n    supplier_product_id SERIAL PRIMARY KEY,\n    supplier_id INT NOT NULL,\n    product_id INT NOT NULL,\n    supply_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (supplier_id) REFERENCES business.suppliers(supplier_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Orders\nCREATE TABLE business.orders (\n    order_id SERIAL PRIMARY KEY,\n    client_id INT NOT NULL,\n    order_date DATE NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (client_id) REFERENCES business.clients(client_id)\n);\n\n-- Table for Order_Items\nCREATE TABLE business.order_items (\n    order_item_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES business.products(product_id)\n);\n\n-- Table for Invoices\nCREATE TABLE business.invoices (\n    invoice_id SERIAL PRIMARY KEY,\n    order_id INT NOT NULL,\n    invoice_date DATE NOT NULL,\n    due_date DATE NOT NULL,\n    amount_due DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(50) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES business.orders(order_id)\n);\n\n-- Table for Payments\nCREATE TABLE business.payments (\n    payment_id SERIAL PRIMARY KEY,\n    invoice_id INT NOT NULL,\n    payment_date DATE NOT NULL,\n    amount_paid DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    FOREIGN KEY (invoice_id) REFERENCES business.invoices(invoice_id)\n);\n\n-- Table for Delivery_Routes\nCREATE TABLE business.delivery_routes (\n    route_id SERIAL PRIMARY KEY,\n    route_name VARCHAR(255) NOT NULL,\n    origin VARCHAR(50) NOT NULL,\n    destination VARCHAR(50) NOT NULL,\n    distance DECIMAL(10, 2) NOT NULL\n);\n\n-- Table for Shipments_Routes\nCREATE TABLE business.shipments_routes (\n    shipment_route_id SERIAL PRIMARY KEY,\n    shipment_id INT NOT NULL,\n    route_id INT NOT NULL,\n    FOREIGN KEY (shipment_id) REFERENCES business.shipments(shipment_id),\n    FOREIGN KEY (route_id) REFERENCES business.delivery_routes(route_id)\n);\n\n\n\n\n\n  "
	}
]